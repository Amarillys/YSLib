// YSLib::Definitions by Franksoft 2010
// CharSet = UTF-8;
// CTime = 2010-01-26 19:34:51 + 08:00;
// UTime = 2010-12-04 07:22 + 08:00;
// Version = r10318;


// Definitions ：方法和公共域定义与说明。

/*

体例说明：

（文档专用）外部语义位置标记符：
@ //作用于可打印字符或空白符（见以下定义）的字符序列，表示逻辑位置。

以下列表中的概念参考 ISO/IEC-14882:2003 - The C++ Programing Language （以下简称“语言标准”）：
翻译单元(translation unit) ：(@2|1 [lex])；
字符集(character set) ：(@2.2 [lex.charset])；
预处理记号(preprocessing token) ：(@2.4 [lex.pptoken])；
记号(token) ：(@2.6 [lex.token])；
注释(comment) ：(@2.7 [lex.comment])；
头文件名(header name) ：(@2.8 [lex.header])；
标识符(identifier) ：(@2.10 [lex.name])；
关键字(keyword) ：(@2.11 [lex.key])；
操作符(operator) ：(@2.11 [lex.operators])；
标点符(punctuator) ：(@2.11 [lex.operators])；
字面量(literal) ：(@2.13 [lex.literals])；
转义[字符]序列(escape sequence) ：(@2.13.2 [lex.ccon])；
实体(entity) ：(@3|3 [basic])；
名称(name) ：(@3|4 [basic])；
作用域(scope) ：(@3.3|1 [basic.scope])；
链接(linkage) ：(@3.5 [basic.link])；
存储期(storage duration) ：(@3.7 [basic.stc])；
类型(type) ：(@3.9 [basic.types])；
对象类型(object type) ：(@3.9 [basic.types])；
不完整类型(incomplete type) ：(@3.9.1 [basic.fundamental])；
命名空间(namespace) ：(@7.3 [basic.namespace])。

以下内容参考语言标准相关描述：
续行/断行连接(line continuation) ：(@2.1|2 [lex.phases])，“splicing physical source lines to form logical source lines”。

以下为附加语法和语义说明。

类预处理器语法：
#region $name_exp //表示字符序列 $name_exp 标记的位置，可用于标记段落。供文档规格化工具使用。
其它预处理指令同语言标准。

外部语义链接标记符：
$ //作用于受限制的字符序列（语言规范中定义的标识符或关键字）前，表示该字符序列不由编译程序提供语义实现。
$import //导入实体。
$export //导出实体，显式使用表示强调无论实现如何，应该向外部提供形式上和之后说明一致的接口。

全局域关键字：
$code {} //表示（源）代码段。
$unit $unit_name //单元：指称一个编译单元（一般应为语言规范中定义的翻译单元）。单元名称 $unit_name 为可变部分，是语言规范中定义的标识符或关键字。
$header $header_name //头文件：指称一个头文件。头文件名标识字符序列 $header_name 是可变部分，同语言标准中 #include $header_name 的用法。

*/

#region synopsis(begin)

//平台定义文件（platform.h）定义示例。

$code $header <platform.h> {


#ifndef _ATTRIBUTE
#	ifdef __GNUC__
#		define _ATTRIBUTE(attrs) __attribute__ (attrs)
#	else
#		define _ATTRIBUTE(attrs)
#	endif
#endif


//$example:
//字符兼容性补充。

#include <stdint.h>

namespace std
{
	typedef ::uint16_t char16_t;
	typedef ::uint32_t char32_t;
}


//$example:
$import $header <nds.h>, <fat.h>, <unistd.h>, <sys/dir.h>;

//像素类型。
$import type $pixeltype;

$import typedef signed char s8;
$import typedef unsigned char u8;
$import typedef signed short s16;
$import typedef unsigned short u16;
$import typedef signed long s32;
$import typedef unsigned long u32;

//主屏幕的宽与高。
extern const u16 $SCREEN_WIDTH, $SCREEN_HEIGHT;

//定义使用 Unicode 编码字符串。
#ifndef UNICODE
#	define UNICODE
//宽字符支持。
#	define CHRLIB_WCHAR_T_SIZE 4
#endif

} //$code;


//非本体或 YGlobal 声明的对象列表。
$header Core::YShell
{
	extern LRES
	MainShlProc(const Message&);
} //$header Adaptor::YNew;
$unit Helper::YGlobal
{
	@namespace ::;
	extern int
	YMain(int, char*[]);
} //$header Adaptor::YNew;

//非本体函数列表。
$header Core::YShell
{
	extern LRES
	MainShlProc(const Message&);
} //$header Core::YShell;

$header Core::YDevice
{
	extern bool
	InitAllScreens();
} //$header Core::YDevice;


//友元列表。
class YScreen @@ $header Core::YDevice
{
	friend bool
	InitAllScreens();
} //class YScreen;


// std 命名空间扩展。
namespace std
{
	$unit YString;
} //namespace std;

//命名空间单元分布。

namespace Components
{
	$unit Shell::YComponents;
	$unit Shell::YDesktop;
	namespace Controls
	{
		$unit Shell::Controls;
	} //namespace Controls;
	namespace Forms
	{
		$unit Shell::YWindow;
		$unit Shell::YForm;
	} //namespace Forms;
	namespace Widgets
	{
		$unit Shell::YWidgets;
	} //namespace Widgets;
}

namespace Design
{
	$unit Core::YCoreUtilities;
	namespace Policies
	{
		namespace Operations
		{
			$header Adaptor::Reference;
		} //namespace Operations;
	} //namespace Policies;
} //namespace Design;

namespace Device
{
	$unit Core::YGraphicDevice;
} //namespace Device;

namespace Drawing
{
	$unit Adaptor::Font;
	$unit Core::YObject;
	$unit Core::YResourse;
} //namespace Drawing;

namespace IO
{
	$unit Core::YFile;
} //namespace IO;

namespace Runtime
{
	$header Core::YEvent;
	$unit Shell::Control;
	$unit Shell::YGUI;
} //namespace Runtime;

namespace Shells
{
	$unit Core::YShell;
	$unit Core::YShellMessage;
	$unit Core::YShellMessageMapping;
	$unit Core::YShellProcessing;
} //namespace Shells;

namespace Timers
{
	$unit Service::YTimer;
} //namespace Timers;

namespace Text
{
	$unit Core::YString;
	$unit Service::YTextManager;
} //namespace Text;

// std 命名空间兼容性污染列表。

$header <platform.h>
{
	typedef ::uint16_t char16_t;
	typedef ::uint32_t char32_t;
} //$header <platfrom.h>

//既定 stdex 命名空间污染列表。

$header YAdaptor
{
	using CHRLib::uchar_t;
	using CHRLib::uint_t;
} //$header YAdaptor;

//既定内部命名空间污染列表。

$header Adaptor::YAdaptor
{
	namespace Text
	{
		using namespace CHRLib;
	} //namespace Text;
	using Text::fchar_t, Text::uchar_t, Text::uint_t;	

	using platform::DEF_PATH_DELIMITER, platform::DEF_PATH_SEPERATOR,
		platform::PATHSTR, platform::FILENAMESTR;
	using platform::direxists,
	platform::chdir, platform::getcwd_n;
	using platform::terminate;
	using platform::HDirectory,
		platform::IsAbsolute, platform::GetRootNameLength;
	using platform::ScreenSychronize;
	using platform::WaitForInput;
	using platform::GetRTC, platform::ResetRTC;
	using platform::InitVideo;
	namespace Drawing
	{
		using platform::BitmapPtr, ConstBitmapPtr;
		using platform::Color;
		namespace ColorSpace = platform::ColorSpace;
	} //namespace Drawing;
	namespace Runtime
	{
		namespace KeySpace = platform::KeySpace;
		using platform::Key, platform::KeysInfo, CursorInfo;
	} //namespace Runtime;
	using namespace platform, platform_ex;
} //$header Adaptor::YAdaptor;

$Adaptor::Container : Adaptor::YAdaptor
{
	using yasli::vector;
	using std::list, std::map, std::set, std::stack, std::queue, std::priority_queue, std::basic_string, std::string;
} //$header Adaptor::Container;

$header Core::YShellDefinition : Adaptor::YAdaptor
{
	using Components::Controls::IControl, Components::Controls::IVisualControl;
	using Components::Forms::YForm, Components::Forms::YFrameWindow;
	using Components::Widgets::IWidget, Components::Widgets::IUIBox, Components::Widgets::IUIContainer;
	using Components::YDesktop;

	using Device::YScreen;

	using Drawing::YFontCache;

	using Shells::YMessageQueue;
	using Shells::YShell, Shells::YShellMain;

	using Text::String;
} //$header Core::YShellDefinition;

$header Core::YCoreUtilities : Core::YShellDefinition
{
	using Design::NonCopyable;
}

$header Core::YShellMessage : Core::YShellDefinition
{
	using Drawing::Point;

	using Shells::Message, Shells::InsertMessage;
} //$header Core::YCoreUtilities;

//$header Core::YResource : Shell::YGDI;

$header Shell::YGDI
{
} //$header Shell::YGDI;

$header Shell::YComponent : YShellMessage;

$header Shell::YWidget : Shell::YComponent, Core::YResource
{
	namespace Components
	{
		using Drawing::PixelType, Drawing::BitmapPtr, Drawing::ConstBitmapPtr, Drawing::ScreenBufferType, Drawing::Color;
		namespace ColorSpace = Drawing::ColorSpace;

		using Drawing::Point, Drawing::Vec, Drawing::Size, Drawing::Rect;
		using Drawing::YImage;
	} //namespace Components;
} //$header Shell::YWidget;

$header Shell::YControl : Shell::YWidget
{
	namespace Components
	{
		using namespace Drawing;
	} //namespace Components;
} //$header Shell::YControl;

} //$code YSLib;

///

#region synopsis(end)

