// YSLib::Definitions by Franksoft 2010 - 2011
// CharSet = UTF-8;
// CTime = 2010-01-26 19:34:51 +0800;
// UTime = 2011-04-09 21:11 +0800;
// Version = r10732;


// Definitions ：方法和公共域定义与说明。

/*

体例说明：

（文档专用）外部语义位置标记符：
@ //作用于可打印字符或空白符（见以下定义）的字符序列，表示逻辑位置。

以下列表中的概念参考 ISO/IEC-14882:2003 - The C++ Programing Language （以下简称“语言标准”）：
翻译单元(translation unit) ：(@2/1 [lex])；
字符集(character set) ：(@2.2 [lex.charset])；
预处理记号(preprocessing token) ：(@2.4 [lex.pptoken])；
记号(token) ：(@2.6 [lex.token])；
注释(comment) ：(@2.7 [lex.comment])；
头文件名(header name) ：(@2.8 [lex.header])；
标识符(identifier) ：(@2.10 [lex.name])；
关键字(keyword) ：(@2.11 [lex.key])；
操作符(operator) ：(@2.11 [lex.operators])；
标点符(punctuator) ：(@2.11 [lex.operators])；
字面量(literal) ：(@2.13 [lex.literals])；
转义[字符]序列(escape sequence) ：(@2.13.2 [lex.ccon])；
实体(entity) ：(@3/3 [basic])；
名称(name) ：(@3/4 [basic])；
作用域(scope) ：(@3.3/1 [basic.scope])；
链接(linkage) ：(@3.5 [basic.link])；
存储期(storage duration) ：(@3.7 [basic.stc])；
类型(type) ：(@3.9 [basic.types])；
对象类型(object type) ：(@3.9 [basic.types])；
不完整类型(incomplete type) ：(@3.9.1 [basic.fundamental])；
命名空间(namespace) ：(@7.3 [basic.namespace])。

以下内容参考语言标准相关描述：
续行/断行连接(line continuation) ：(@2.1/2 [lex.phases])，“splicing physical source lines to form logical source lines”。

以下为附加语法和语义说明。

类预处理器语法：
#region $name_exp //表示字符序列 $name_exp 标记的位置，可用于标记段落。供文档规格化工具使用。
其它预处理指令同语言标准。

外部语义链接标记符：
$ //作用于受限制的字符序列（语言规范中定义的标识符或关键字）前，表示该字符序列不由编译程序提供语义实现。
$import //导入实体。
$export //导出实体，显式使用表示强调无论实现如何，应该向外部提供形式上和之后说明一致的接口。

全局域关键字：
$code {} //表示（源）代码段。
$unit $unit_name //单元：指称一个编译单元（一般应为语言规范中定义的翻译单元）。单元名称 $unit_name 为可变部分，是语言规范中定义的标识符或关键字。
$header $header_name //头文件：指称一个头文件。头文件名标识字符序列 $header_name 是可变部分，同语言标准中 #include $header_name 的用法。

*/

#region synopsis(begin)

//平台定义文件（platform.h）定义示例。

$code $header <platform.h> {


#ifndef _ATTRIBUTE
#	ifdef __GNUC__
#		define _ATTRIBUTE(attrs) __attribute__ (attrs)
#	else
#		define _ATTRIBUTE(attrs)
#	endif
#endif


//$example:
//字符兼容性补充。

#include <stdint.h>

namespace std
{
	typedef ::uint16_t char16_t;
	typedef ::uint32_t char32_t;
}


//$example:
$import $header <nds.h>, <fat.h>, <unistd.h>, <sys/dir.h>;

//像素类型。
$import type $pixeltype;

$import typedef signed char s8;
$import typedef unsigned char u8;
$import typedef signed short s16;
$import typedef unsigned short u16;
$import typedef signed long s32;
$import typedef unsigned long u32;

//主屏幕的宽与高。
extern const u16 $SCREEN_WIDTH, $SCREEN_HEIGHT;

//定义使用 Unicode 编码字符串。
#ifndef UNICODE
#	define UNICODE
//宽字符支持。
#	define CHRLIB_WCHAR_T_SIZE 4
#endif

} //$code;


//既定内部宏污染列表。
$herder *
{
INCLUDED_*_
}

$header Platform
{
YCL_YCOMMON_H
YSL_YSBUILD_H
UNICODE
CHRLIB_WCHAR_T_SIZE
}

$dir CHRLib
{
$header CHRLib
{
CHRLIB_BEGIN
CHRLIB_END
CHRLIB_
CHRLIB
CHRLIB_BEGIN_NAMESPACE(s)
CHRLIB_END_NAMESPACE(s)
_ustr(str)
}
} //$dir CHRLib;

$dir YCLib
{
$header YDefinition
{
FALSE
TRUE
BASETYPES
UCSCHAR_INVALID_CHARACTER
MIN_UCSCHAR
MAX_UCSCHAR
}
$header YCommon
{
UNICODE
YCL_MAX_FILENAME_LENGTH
YCL_MAX_PATH_LENGTH
DEF_PATH_ROOT
BITALPHA
} //$dir YCLib;

$dir YSLib
{
$dir Adaptor
{
$header Config
{
YCL_USE_YASSERT
YSL_USE_MEMORY_DEBUG
YSL_USE_EXCEPTION_SPECIFICATION
YSL_MULTITHREAD
YSL_USE_COPY_ON_WRITE
YSL_USE_YASLI_VECTOR
YSL_USE_FLEX_STRING
YSL_OPT_SMALL_STRING_LENGTH
YSL_DEBUG_MSG
YSL_EVENT_MULTICAST
}
$header Base
{
_yJOIN
YSL_BEGIN
YSL_END
YSL_
YSL
YSL_BEGIN_NAMESPACE(s)
YSL_END_NAMESPACE(s)
YSL_BEGIN_SHELL(s)
YSL_END_SHELL(s)
YSL_SHL_(s)
YSL_SHL(s)
ythrow(*)?
_yInterface
_yInterfaceHead(_name)
PDeclInterface(_name)
DeclInterface(_name)
DeclBasedInterface(_name, *)
ImplI(_interface, *)
ImplA(_interface, *)
DeclBasedInterface1(_name, _base1)
DeclBasedInterface2(_name, _base1, _base2)
DeclBasedInterface3(_name, _base1, _base2, _base3)
DeclBasedInterface4(_name, _base1, _base2, _base3, _base4)
ImplI1(_interface, _base1)
ImplI2(_interface, _base1, _base2)
ImplI3(_interface, _base1, _base2, _base3)
ImplI4(_interface, _base1, _base2, _base3, _base4)
ImplA1(_interface, _base1)
ImplA2(_interface, _base1, _base2)
ImplA3(_interface, _base1, _base2, _base3)
ImplA4(_interface, _base1, _base2, _base3, _base4)
DeclIEntry(_signature)
EndDecl
PDefH(_type, _name, *)
PDefHOperator(_type, _op, *)
PDefH0(_type, _name)
PDefH1(_type, _name, _param1)
PDefH2(_type, _name, _param1, _param2)
PDefH3(_type, _name, _param1, _param2, _param3)
PDefH4(_type, _name, _param1, _param2, _param3, _param4)
PDefHOperator0(_type, _op)
PDefHOperator1(_type, _op, _param1)
PDefHOperator2(_type, _op, _param1, _param2)
PDefHOperator3(_type, _op, _param1, _param2, _param3)
PDefHOperator4(_type, _op, _param1, _param2, _param3, _param4)
PDefConverter(_type)
ImplRet(_expr)
ImplBodyBase(_base, _name, _arglist, *)
ImplBodyMember(_member, _name, _arglist, *)
ImplBodyBase0(_base, _name)
ImplBodyBase1(_base, _name, _arg1)
ImplBodyBase2(_base, _name, _arg1, _arg2)
ImplBodyBase3(_base, _name, _arg1, _arg2, _arg3)
ImplBodyBase4(_base, _name, _arg1, _arg2, _arg3, _arg4)
ImplBodyMember0(_member, _name)
ImplBodyMember1(_member, _name, _arg1)
ImplBodyMember2(_member, _name, _arg1, _arg2)
ImplBodyMember3(_member, _name, _arg1, _arg2, _arg3)
ImplBodyMember4(_member, _name, _arg1, _arg2, _arg3, _arg4)
DefEmptyDtor(_type)
DefConverter(_type, _expr)
DefConverterBase(_type, _base)
DefConverterMember(_type, _member)
DefMutableConverter(_type, _expr)
DefMutableConverterBase(_type, _base)
DefMutableConverterMember(_type, _member)
DefPredicate(_name, _member)
DefPredicateBase(_name, _base)
DefPredicateMember(_name, _member)
DefMutablePredicate(_name, _member)
DefMutablePredicateBase(_name, _base)
DefMutablePredicateMember(_name, _member)
DefGetter(_type, _name, _member)
DefGetterBase(_type, _name, _base)
DefGetterMember(_type, _name, _member)
DefMutableGetter(_type, _name, _member)
DefMutableGetterBase(_type, _name, _base)
DefMutableGetterMember(_type, _name, _member)
DefSetter(_type, _name, _member)
DefSetterDe(_type, _name, _member, _defv)
DefSetterBase(_type, _name, _base)
DefSetterBaseDe(_type, _name, _base, _defv)
DefSetterMember(_type, _name, _member)
DefSetterMemberDe(_type, _name, _member, _defv)
DefSetterEx(_type, _name, _member, _tempArgName, _expr)
DefSetterDeEx(_type, _name, _member, _defv, _tempArgName, _expr)
}
} //$dir Adaptor;
$dir Core
{
$header YShellDefinition
{
DeclareHandle(type, handle)
}
$header YReference
{
YHandleOP
}
$header YEvent
{
DefDelegate(_name, _tSender, _tEventArgs)
EventT(_tEventHandler)
DepEventT(_tEventHandler)
DeclEvent(_tEventHandler, _name)
DeclDepEvent(_tEventHandler, _name)
DeclEventRef(_tEventHandler, _name)
DeclDepEventRef(_tEventHandler, _name)
DeclIEventEntry(_tEventHandler, _name)
DeclIDepEventEntry(_tEventHandler, _name)
DefEventGetter(_tEventHandler, _name, _member)
DefEventGetterBase(_tEventHandler, _name, _base)
DefEventGetterMember(_tEventHandler, _name, _member)
DefDepEventGetter(_tEventHandler, _name, _member)
DefDepEventGetterBase(_tEventHandler, _name, _base)
DefDepEventGetterMember(_tEventHandler, _name, _member)
DefMutableEventGetter(_tEventHandler, _name, _member)
DefMutableEventGetterBase(_tEventHandler, _name, _base)
DefMutableEventGetterMember(_tEventHandler, _name, _member)
DefMutableDepEventGetter(_tEventHandler, _name, _member)
DefMutableDepEventGetterBase(_tEventHandler, _name, _base)
DefMutableDepEventGetterMember(_tEventHandler, _name, _member)
}
$header YShellMessageDefinition
{
SM_NULL
SM_SET
SM_DROP
SM_ACTIVATED
SM_DEACTIVATED
SM_PAINT
SM_QUIT
SM_INPUT
}
} //$dir Core;
$dir Shell
$header YControl
{
DefEventTypeMapping(_name, _tEventHandler)
} //$header YControl;
$unit YGDI
{
YSL_FAST_BLIT
}
} //$dir Shell;
$dir Helper
{
$header YShellHelper
{
DefDynInitRef(_type, _name, _expr)
}
} //$dir Helper;
} //$dir YSLib;

//非本体或 YGlobal 声明的对象列表。


//非本体函数列表。
$header Core::YShell
{
	extern int
	MainShlProc(const Message&);
} //$header Core::YShell;
$header Core::YDevice
{
	extern bool
	InitAllScreens();
} //$header Core::YDevice;

$unit Helper::YGlobal
{
	extern void
	ReleaseShells();
	extern int
	::YMain(int, char*[]);
} //$unit Helper::YGlobal;


//友元列表。
class YScreen @ $header Core::YDevice
{
	friend bool
	InitAllScreens();
} //class YScreen;

class PlatformResource @ $header Helper::YGlobal
{
	friend class YApplication;
} //class PlatformResource;


// std 命名空间扩展。
namespace std
{
} //namespace std;

//命名空间单元分布。

// YCLib 略。

namespace Components
{
	$unit Shell::YComponents;
	$unit Shell::YDesktop;
	namespace Controls
	{
		$unit Shell::Controls;
	} //namespace Controls;
	namespace Forms
	{
		$unit Shell::YWindow;
		$unit Shell::YForm;
	} //namespace Forms;
	namespace Widgets
	{
		$unit Shell::YWidgets;
	} //namespace Widgets;
}

namespace Design
{
	$header Adaptor::YAdaptor;	
	$unit Core::YCoreUtilities;
} //namespace Design;

namespace Device
{
	$unit Core::YGraphicDevice;
} //namespace Device;

namespace Drawing
{
	$unit Adaptor::Font;
	$unit Core::YObject;
	$unit Core::YResourse;
} //namespace Drawing;

namespace Messaging
{
	$unit Core::YShellMessage;
} //namespace Messaging;

namespace IO
{
	$unit Core::YFile;
} //namespace IO;

namespace Policies
{
	$header Adaptor::YAdaptor;
	$header Adaptor::Reference;
} //namespace Policies;

namespace Runtime
{
	$header Core::YEvent;
	$unit Shell::Control;
	$unit Shell::YGUI;
} //namespace Runtime;

namespace Shells
{
	$unit Core::YShell;
	$unit Shell::YComponent;
} //namespace Shells;

namespace Timers
{
	$unit Service::YTimer;
} //namespace Timers;

namespace Text
{
	$unit Core::YString;
	$unit Service::YTextManager;
} //namespace Text;

// std 命名空间兼容性污染列表。

$header <platform.h>
{
	typedef ::uint16_t char16_t;
	typedef ::uint32_t char32_t;
} //$header <platfrom.h>

//既定 ystdex 命名空间污染列表。

$header YStandardExtend
{
	using std::tr1::add_const;
	using std::tr1::add_cv;
	using std::tr1::add_pointer;
	using std::tr1::add_reference;
	using std::tr1::add_volatile;
	using std::tr1::aligned_storage;
	using std::tr1::alignment_of;
	using std::tr1::extent;
	using std::tr1::false_type;
	using std::tr1::has_nothrow_assign;
	using std::tr1::has_nothrow_constructor;
	using std::tr1::has_nothrow_copy;
	using std::tr1::has_trivial_assign;
	using std::tr1::has_trivial_constructor;
	using std::tr1::has_trivial_copy;
	using std::tr1::has_trivial_destructor;
	using std::tr1::has_virtual_destructor;
	using std::tr1::integral_constant;
	using std::tr1::is_abstract;
	using std::tr1::is_arithmetic;
	using std::tr1::is_array;
	using std::tr1::is_base_of;
	using std::tr1::is_class;
	using std::tr1::is_compound;
	using std::tr1::is_const;
	using std::tr1::is_convertible;
	using std::tr1::is_empty;
	using std::tr1::is_enum;
	using std::tr1::is_floating_point;
	using std::tr1::is_function;
	using std::tr1::is_fundamental;
	using std::tr1::is_integral;
	using std::tr1::is_member_function_pointer;
	using std::tr1::is_member_object_pointer;
	using std::tr1::is_member_pointer;
	using std::tr1::is_pod;
	using std::tr1::is_pointer;
	using std::tr1::is_polymorphic;
	using std::tr1::is_reference;
	using std::tr1::is_same;
	using std::tr1::is_scalar;
	using std::tr1::is_signed;
	using std::tr1::is_union;
	using std::tr1::is_unsigned;
	using std::tr1::is_void;
	using std::tr1::is_volatile;
	using std::tr1::rank;
	using std::tr1::remove_all_extents;
	using std::tr1::remove_const;
	using std::tr1::remove_cv;
	using std::tr1::remove_extent;
	using std::tr1::remove_pointer;
	using std::tr1::remove_reference;
	using std::tr1::remove_volatile;
	using std::tr1::true_type;
} //$header YStandardExtend;

$header YAdaptor
{
	using CHRLib::uchar_t;
	using CHRLib::uint_t;
} //$header YAdaptor;

//既定 YSLib 命名空间污染列表。

$header Adaptor::YAdaptor
{
	namespace Text
	{
		using namespace CHRLib;
	} //namespace Text;
	using Text::fchar_t, Text::uchar_t, Text::uint_t;	

	using std::size_t;
	using ystdex::errno_t;

	using platform::DEF_PATH_DELIMITER, platform::DEF_PATH_SEPERATOR,
		platform::PATHSTR, platform::FILENAMESTR;
	using platform::mmbset, platform::mmbcpy;
	using platform::direxists, platform::chdir, platform::getcwd_n;
	using platform::terminate;
	using platform::HDirectory,
		platform::IsAbsolute, platform::GetRootNameLength;
	using platform::ScreenSynchronize;
	using platform::WaitForInput;
	using platform::GetRTC, platform::ResetRTC;
	using platform::InitVideo;
	namespace Drawing
	{
		using platform::BitmapPtr, ConstBitmapPtr;
		using platform::Color;
		namespace ColorSpace = platform::ColorSpace;
	} //namespace Drawing;
	namespace Runtime
	{
		namespace KeySpace = platform::KeySpace;
		using platform::Key, platform::KeysInfo, CursorInfo;
	} //namespace Runtime;
	using namespace platform, platform_ex;

	//库适配器。

//! \brief 基础语言设施。
YSL_BEGIN_NAMESPACE(Design)

	//类型操作和类型特征。
	using Loki::Typelist;
	namespace TL = Loki::TL;
	using Loki::NullType;
	using Loki::EmptyType;
	using Loki::Int2Type;
	using Loki::Type2Type;
	using Loki::Select;
	using Loki::IsCustomUnsignedInt;
	using Loki::IsCustomSignedInt;
	using Loki::IsCustomFloat;
	using Loki::TypeTraits;

	// Function 和 Function 。
	using Loki::Function;
	using Loki::Functor;

//! \brief 设计模式。
YSL_BEGIN_NAMESPACE(Pattern)
YSL_END_NAMESPACE(Pattern)

YSL_END_NAMESPACE(Design)

	//使用 Loki 小对象。
	using Loki::SmallObject;

	//使用 Loki 策略、智能指针、强指针。
	using Loki::RefToValue;
YSL_BEGIN_NAMESPACE(Policies)
	using Loki::PropagateConst;
	using Loki::DontPropagateConst;
	using Loki::RefCounted;
	using Loki::AllowConversion;
	using Loki::DisallowConversion;
	using Loki::RejectNull;
	using Loki::AssertCheck;
	using Loki::DefaultSPStorage;
	using Loki::HeapStorage;
	using Loki::TwoRefCounts;
	using Loki::CantResetWithStrong;
	using Loki::AllowReset;
	using Loki::NeverReset;
	using Loki::DeleteNothing;
	using Loki::DeleteArray;
	using Loki::DeleteSingle;
YSL_END_NAMESPACE(Policies)
	using Loki::SmartPtr;
	using Loki::StrongPtr;

} //$header Adaptor::YAdaptor;

$Adaptor::Container : Adaptor::YAdaptor
{
#ifdef YSL_USE_YASLI_VECTOR
	using yasli::vector;
#else
	using std::vector
#endif
	using std::pair, std::make_pair;
	using std::list, std::map, std::set, std::stack, std::queue, std::priority_queue;
} //$header Adaptor::Container;

$header Core::YShellDefinition : Adaptor::YAdaptor
{
	using Components::YDesktop;

	using Device::YScreen;

	using Drawing::YFontCache;

	using Messaging::YMessageQueue;
	
	using Shells::
	{YMainShell, YShell};

	using Text::String;
} //$header Core::YShellDefinition;

$header Core::YCoreUtilities : Core::YShellDefinition
{
	using Design::NonCopyable;
}

$header Core::YShellMessage : Core::YShellDefinition
{
	using Drawing::Point;

	using Messaging::Message;
} //$header Core::YCoreUtilities;

//$header Core::YResource : Shell::YGDI;

$header Shell::YGDI
{
} //$header Shell::YGDI;

$header Shell::YComponent : YShellMessage
{
	using Components::Controls::
	{IControlableComponent, IControl};
	using Components::Forms::
	{YForm, YWindow};
	using Components::Widgets::
	{IWidget, IUIBox, IUIContainer};

	using Shells::YGUIShell;
} //$header Shell::YComponent;

$header Shell::YWidget : Shell::YComponent, Core::YResource
{
	namespace Components
	{
		using Drawing::PixelType, Drawing::BitmapPtr, Drawing::ConstBitmapPtr, Drawing::ScreenBufferType, Drawing::Color;
		namespace ColorSpace = Drawing::ColorSpace;

		using Drawing::Point, Drawing::Vec, Drawing::Size, Drawing::Rect;
		using Drawing::Graphics;
	} //namespace Components;
} //$header Shell::YWidget;

$header Shell::YControl : Shell::YWidget
{
	namespace Components
	{
		using namespace Drawing;
	} //namespace Components;
} //$header Shell::YControl;

} //$code YSLib;

///

#region synopsis(end)

