/*
	Copyright (C) by Franksoft 2010 - 2011.

	This file is part of the YSLib project, and may only be used,
	modified, and distributed under the terms of the YSLib project
	license, LICENSE.TXT.  By continuing to use, modify, or distribute
	this file you indicate that you have read the license and
	understand and accept it fully.
*/

/*!	\file Definitions.txt
\ingroup Documentation
\brief 方法和公共域定义与说明。
\version r11416;
\author FrankHB<frankhb1989@gmail.com>
\par 创建时间:
	2010-01-26 19:34:51 +0800;
\par 修改时间:
	2011-09-23 14:59 +0800;
\par 字符集:
	UTF-8;
\par 模块名称:
	YSLib::Documentation::Definitions;
*/


/*

体例说明：

（文档专用）外部语义位置标记符：
@ //作用于可打印字符或空白符（见以下定义）的字符序列，表示逻辑位置。

以下列表中的概念参考 ISO/IEC-14882:2003 - The C++ Programing Language （以下简称“语言标准”）：
翻译单元(translation unit) ：(@2/1 [lex])；
字符集(character set) ：(@2.2 [lex.charset])；
预处理记号(preprocessing token) ：(@2.4 [lex.pptoken])；
记号(token) ：(@2.6 [lex.token])；
注释(comment) ：(@2.7 [lex.comment])；
头文件名(header name) ：(@2.8 [lex.header])；
标识符(identifier) ：(@2.10 [lex.name])；
关键字(keyword) ：(@2.11 [lex.key])；
操作符(operator) ：(@2.11 [lex.operators])；
标点符(punctuator) ：(@2.11 [lex.operators])；
字面量(literal) ：(@2.13 [lex.literals])；
转义[字符]序列(escape sequence) ：(@2.13.2 [lex.ccon])；
实体(entity) ：(@3/3 [basic])；
名称(name) ：(@3/4 [basic])；
作用域(scope) ：(@3.3/1 [basic.scope])；
链接(linkage) ：(@3.5 [basic.link])；
存储期(storage duration) ：(@3.7 [basic.stc])；
类型(type) ：(@3.9 [basic.types])；
对象类型(object type) ：(@3.9 [basic.types])；
不完整类型(incomplete type) ：(@3.9.1 [basic.fundamental])；
命名空间(namespace) ：(@7.3 [basic.namespace])。

以下内容参考语言标准相关描述：
续行/断行连接(line continuation) ：(@2.1/2 [lex.phases])，“splicing physical source lines to form logical source lines”。

以下为附加语法和语义说明。

类预处理器语法：
#region $name_exp //表示字符序列 $name_exp 标记的位置，可用于标记段落。供文档规格化工具使用。
其它预处理指令同语言标准。

外部语义链接标记符：
$ //作用于受限制的字符序列（语言规范中定义的标识符或关键字）前，表示该字符序列不由编译程序提供语义实现。
$import //导入实体。
$export //导出实体，显式使用表示强调无论实现如何，应该向外部提供形式上和之后说明一致的接口。

全局域关键字：
$code {} //表示（源）代码段。
$unit $unit_n //单元：指称一个编译单元（一般应为语言规范中定义的翻译单元）。单元名称 $unit_n 为可变部分，是语言规范中定义的标识符或关键字。
$header $header_n //头文件：指称一个头文件。头文件名标识字符序列 $header_n 是可变部分，同语言标准中 #include $header_n 的用法。

*/

#region synopsis(begin)

//平台定义文件（platform.h）定义示例。

$code $header <platform.h> {


#ifndef _ATTRIBUTE
#	ifdef __GNUC__
#		define _ATTRIBUTE(attrs) __attribute__ (attrs)
#	else
#		define _ATTRIBUTE(attrs)
#	endif
#endif


//$example:
$import $header <nds/ndstypes.h>;

//像素类型。
$import type $pixeltype;

$import typedef signed char s8;
$import typedef unsigned char u8;
$import typedef signed short s16;
$import typedef unsigned short u16;
$import typedef signed long s32;
$import typedef unsigned long u32;

//主屏幕的宽与高。
extern const u16 $SCREEN_WIDTH, $SCREEN_HEIGHT;


// $ API （可分离于 <api.h> 中）定义示例：
//$example:
$import $header <fat.h>, <unistd.h>, <sys/dir.h>;

#define YCL_YCOMMON_H <ycommon.h>
#define YSL_YSBUILD_H <YSLib/Helper/yshelper.h>

} //$code;


//既定内部宏污染列表。
$herder *
{
INCLUDED_*_
}

$header Platform
{
YCL_YCOMMON_H
YSL_YSBUILD_H
}

$dir YCLib
{
$dir ystdex
{
$header Utilities
{
yforward
}
} //$dir ystdex;
$dir CHRLib
{
$header CHRLib
{
CHRLIB_BEGIN
CHRLIB_END
CHRLIB_
CHRLIB
CHRLIB_BEGIN_NAMESPACE(s)
CHRLIB_END_NAMESPACE(s)
_ustr(str)
}
} //$dir CHRLib;
$header YDefinition
{
FALSE
TRUE
BASETYPES
UCSCHAR_INVALID_CHARACTER
MIN_UCSCHAR
MAX_UCSCHAR
}
$header YCommon
{
YCL_MAX_FILENAME_LENGTH
YCL_MAX_PATH_LENGTH
DEF_PATH_ROOT
BITALPHA
} //$dir YCLib;

$dir YSLib
{
$dir Adaptor
{
$header Config
{
YCL_USE_YASSERT
YSL_USE_MEMORY_DEBUG
YSL_USE_EXCEPTION_SPECIFICATION
YSL_MULTITHREAD
YSL_USE_COPY_ON_WRITE
YSL_USE_YASLI_VECTOR
YSL_USE_FLEX_STRING
YSL_OPT_SMALL_STRING_LENGTH
YSL_DEBUG_MSG
}
$header Base
{
_yJOIN
YSL_BEGIN
YSL_END
YSL_
YSL
YSL_BEGIN_NAMESPACE(s)
YSL_END_NAMESPACE(s)
ythrow(*)?
_yInterface
_yInterfaceHead(_n)
PDeclInterface(_n)
DeclInterface(_n)
DeclBasedInterface(_n, *)
ImplI(_i, *)
ImplA(_i, *)
DeclBasedInterface1(_n, _b1)
DeclBasedInterface2(_n, _b1, _b2)
DeclBasedInterface3(_n, _b1, _b2, _b3)
DeclBasedInterface4(_n, _b1, _b2, _b3, _b4)
ImplI1(_i, _b1)
ImplI2(_i, _b1, _b2)
ImplI3(_i, _b1, _b2, _b3)
ImplI4(_i, _b1, _b2, _b3, _b4)
ImplA1(_i, _b1)
ImplA2(_i, _b1, _b2)
ImplA3(_i, _b1, _b2, _b3)
ImplA4(_i, _b1, _b2, _b3, _b4)
DeclIEntry(_signature)
EndDecl
DefExtendClass1(_n, _b, _a)
PDefH(_t, _n, *)
PDefHOperator(_t, _op, *)
PDefH0(_t, _n)
PDefH1(_t, _n, _p1)
PDefH2(_t, _n, _p1, _p2)
PDefH3(_t, _n, _p1, _p2, _p3)
PDefH4(_t, _n, _p1, _p2, _p3, _p4)
PDefHOperator0(_t, _op)
PDefHOperator1(_t, _op, _p1)
PDefHOperator2(_t, _op, _p1, _p2)
PDefHOperator3(_t, _op, _p1, _p2, _p3)
PDefHOperator4(_t, _op, _p1, _p2, _p3, _p4)
PDefConverter(_t)
PDefTH1(_t1)
PDefTH2(_t1, _t2)
PDefTH3(_t1, _t2, _t3)
PDefTH4(_t1, _t2, _t3, _t4)
ImplRet(_e)
ImplBodyBase(_b, _n, _alist, *)
ImplBodyMember(_m, _n, _alist, *)
ImplBodyBase0(_b, _n)
ImplBodyBase1(_b, _n, _a1)
ImplBodyBase2(_b, _n, _a1, _a2)
ImplBodyBase3(_b, _n, _a1, _a2, _a3)
ImplBodyBase4(_b, _n, _a1, _a2, _a3, _a4)
ImplBodyMember0(_m, _n)
ImplBodyMember1(_m, _n, _a1)
ImplBodyMember2(_m, _n, _a1, _a2)
ImplBodyMember3(_m, _n, _a1, _a2, _a3)
ImplBodyMember4(_m, _n, _a1, _a2, _a3, _a4)
DefEmptyDtor(_t)
ImplEmptyDtor(_t)
DefDeCtor(_t)
DefDelCtor(_t)
DefDeCopyCtor(_t)
DefDelCopyCtor(_t)
DefDeMoveCtor(_t)
DefDelMoveCtor(_t)
DefDeDtor(_t)
DefDelDtor(_t)
DefDeCopyAssignment(_t),
DefDelCopyAssignment(_t),
DefDeMoveAssignment(_t),
DefDelMoveAssignment(_t)
DefConverter(_t, _e)
DefConverterBase(_t, _b)
DefConverterMember(_t, _m)
DefMutableConverter(_t, _e)
DefMutableConverterBase(_t, _b)
DefMutableConverterMember(_t, _m)
DefPredicate(_n, _m)
DefPredicateBase(_n, _b)
DefPredicateMember(_n, _m)
DefMutablePredicate(_n, _m)
DefMutablePredicateBase(_n, _b)
DefMutablePredicateMember(_n, _m)
DefGetter(_t, _n, _m)
DefGetterBase(_t, _n, _b)
DefGetterMember(_t, _n, _m)
DefMutableGetter(_t, _n, _m)
DefMutableGetterBase(_t, _n, _b)
DefMutableGetterMember(_t, _n, _m)
DefSetter(_t, _n, _m)
DefSetterDe(_t, _n, _m, _defv)
DefSetterBase(_t, _n, _b)
DefSetterBaseDe(_t, _n, _b, _defv)
DefSetterMember(_t, _n, _m)
DefSetterMemberDe(_t, _n, _m, _defv)
DefSetterEx(_t, _n, _m, _tempArgName, _e)
DefSetterDeEx(_t, _n, _m, _defv, _tempArgName, _e)
DefClone(_t, _n)
DefForwardCtorT1(_tClass, _t1, _p1)
DefForwardCtorT2(_tClass, _t1, _p1, _t2, _p2)
DefForwardCtorT3(_tClass, _t1, _p1, _t2, _p2, _t3)
DefForwardCtorT4(_tClass, _t1, _p1, _t2, _p2, _t3, _p3, _t4, _p4)
}
} //$dir Adaptor;
$dir Core
{
$header YEvent
{
DefDelegate(_n, _tSender, _tEventArgs)
EventT(_tEventHandler)
DepEventT(_tEventHandler)
DeclEvent(_tEventHandler, _n)
DeclDepEvent(_tEventHandler, _n)
DeclEventRef(_tEventHandler, _n)
DeclDepEventRef(_tEventHandler, _n)
DeclIEventEntry(_tEventHandler, _n)
DeclIDepEventEntry(_tEventHandler, _n)
DefEventGetter(_tEventHandler, _n, _m)
DefEventGetterBase(_tEventHandler, _n, _b)
DefEventGetterMember(_tEventHandler, _n, _m)
DefDepEventGetter(_tEventHandler, _n, _m)
DefDepEventGetterBase(_tEventHandler, _n, _b)
DefDepEventGetterMember(_tEventHandler, _n, _m)
DefMutableEventGetter(_tEventHandler, _n, _m)
DefMutableEventGetterBase(_tEventHandler, _n, _b)
DefMutableEventGetterMember(_tEventHandler, _n, _m)
DefMutableDepEventGetter(_tEventHandler, _n, _m)
DefMutableDepEventGetterBase(_tEventHandler, _n, _b)
DefMutableDepEventGetterMember(_tEventHandler, _n, _m)
DefExtendEventMap(_n, _b)
}
$header YMessageDefinition
{
SM_NULL
SM_SET
SM_DROP
SM_ACTIVATED
SM_DEACTIVATED
SM_PAINT
SM_QUIT
SM_INPUT
DefMessageTarget
}
} //$dir Core;
$dir Shell
$header YControl
{
DefEventTypeMapping(_n, _tEventHandler)
} //$header YControl;
$unit YGDI
{
YSL_FAST_BLIT
}
} //$dir Shell;
$dir Helper
{
$header YShellHelper
{
DefDynInitRef(_t, _n, _e)
}
} //$dir Helper;
} //$dir YSLib;


//非本体或 YGlobal 定义列表。

//非本体类列表。
$header Core::YShellDefinition
{
	namespace Shells
	{}
} //$header Core::YShellDefinition;

//非本体函数列表。
$header Core::YApplication
{
	extern Application&
	FetchAppInstance();
} //$header Core::YApplication;

$unit Helper::YGlobal
{
	extern void
	ReleaseShells();
} //$unit Helper::YGlobal;

$unit Helper::Shell_DS
{
	namespace Shells
	{
		extern
		YMainShell::YMainShell();
		extern int
		YMainShell::OnActivated(const Message&);
		extern int
		YMainShell::OnDeactivated(const Message&);
	}
} //$unit Helper::Shell_DS;


//友元列表。
class PlatformResource @ $header Helper::YGlobal
{
	friend class Application;
} //class PlatformResource;


//非 YGlobal 的命名空间作用域对象和类静态对象列表。

$dir YCLib
{

$unit YCommon
{
	namespace platform
	{
		class HDirectory
		{
			static PATHSTR Name; //!< 节点名称。
			static struct ::stat Stat; //!< 节点状态信息。
			static int LastError; //!< 上一次操作结果，0 为无错误。
		};

$unit.impl:
		static bool bDebugStatus;
		static bool bUninitializedTimers;
	}
}

$dir CHRLib
{

$unit CharacterMapping
{
	namespace CHRLib
	{
		namespace CharSet
		{
		//别名。
		const Encoding
			iso_ir_6(US_ASCII), ISO646_US(US_ASCII), ASCII(US_ASCII), us(US_ASCII),
				IBM367(US_ASCII), cp367(US_ASCII), csASCII(US_ASCII),
			MS_Kanji(SHIFT_JIS), csShiftJIS(SHIFT_JIS), windows_932_(SHIFT_JIS),
			iso_ir_149(KS_C_5601_1987), KS_C_5601_1989(KS_C_5601_1987),
				KSC_5601(KS_C_5601_1987), korean(KS_C_5601_1987),
				csKSC56011987(KS_C_5601_1987), windows_949_(KS_C_5601_1987),
			windows_65001_(UTF_8),
			CP936(GBK), MS936(GBK), windows_936(GBK),
			windows_54936_(GB18030),

			csUnicode(ISO_10646_UCS_2),
			csUCS4(ISO_10646_UCS_4),
			csUnicodeASCII(ISO_10646_UCS_Basic),
			windows_1201_(UTF_16BE),
			windows_1200_(UTF_16LE),

			csGB2312(GB2312), EUC_CN_(GB2312), windows_51936_(GB2312),
			windows_950_(Big5);
		}

		//默认字符集。
		const Encoding CP_Default = CharSet::UTF_8;
		const Encoding CP_Local = CharSet::GBK;

		//编码转换表。
		const ubyte_t cp17[] = {0};
		extern "C"
		{
			extern const ubyte_t cp113[];
			//extern const ubyte_t cp2026[13658];
		}
		const ubyte_t cp2026[] = {0};
	}
}

} //$dir CHRLib;

} //$dir YCLib;

$dir Adaptor
{

$namespace.using YSLib:

$unit YFont
{
	class Font
	{
		static Font* pDefFont; //!< 默认 Shell 字体。
	};
}

} //$dir Adaptor;

$dir Core
{

$header YCounter
{
	class template GMCounter
	{
		static count_t nCount, nTotal; //!< 实例生成计数和实例计数。
	};
}

$unit YGDIBase
{
	namespace Drawing
	{
		class Point
		{
			static const Point Zero; //!< 无参数构造参数构造的原点对象。
			static const Point FullScreen; \
				//!< 无参数构造参数构造的屏幕右下角边界（不在屏幕坐标系中）对象。
		};

		class Vec
		{
			static const Vec Zero; //!< 无参数构造参数构造的零向量对象。
			static const Vec FullScreen;
				//无参数构造参数构造的由屏幕坐标系原点
				//到屏幕右下角边界（不在屏幕坐标系中）对象。
		};

		class Size
		{
			static const Size Zero; //!< 无参数构造参数构造的零元素对象。
			static const Size FullScreen; //!< 无参数构造参数构造的全屏幕对象。
		};

		class Rect
		{
			static const Rect Empty; //!< 无参数构造参数构造的空矩形对象。
			static const Rect FullScreen; //!< 无参数构造参数构造的全屏幕矩形对象。
		};
	}
}

$unit YString
{
	class String
	{
		static ucs2_t* s_str; //!< 内码转换生成字符串临时指针。
	};
}

$unit YFileSystem
{
	namespace IO
	{
		class Path
		{
			static const ValueType Slash;
			static const Path Now;
			static const Path Parent;
		};
	}
}

$unit YApplication
{
	class Application
	{
		//全局常量。
		static const IO::Path CommonAppDataPath; //!< 程序默认路径。
		static const String CompanyName; //!< 制作组织名称。
		static const String ProductName; //!< 产品名称。
		static const String ProductVersion; //!< 产品版本。
	};
}

$header YStorage
{
	//略。
}

} //$dir Core;

$dir Service
{

$unit YTimer
{
	namespace Timers
	{
		class Timer
		{
			static bool NotInitialized;
			static vu32 SystemTick;
			static TimerMap mTimers;
		};
	}
}

} //$dir Service;


// std 命名空间扩展。
namespace std
{
} //namespace std;

//命名空间单元分布。

// YCLib 略。

namespace Components
{
	$unit UI::YComponents;
	$unit UI::Desktop;
	$unit UI::YControl;
	$unit UI::Button;
	$unit UI::CheckBox;
	$unit UI::Panel;
	$unit UI::ListBox;
	$unit UI::Menu;
	$unit UI::TextList;
	$unit UI::Window;
	$unit UI::Form;
	$unit UI::YWidget;
	$unit UI::YUIContainer;
	$unit UI::YLabel;
	namespace Styles
	{
		$unit UI::YStyle;
	} //namespace Styles;
}

namespace Devices
{
	$unit Core::YDevice;
} //namespace Devices;

namespace Drawing
{
	$unit Adaptor::YFont;
	$unit Core::YObject;
	$unit Core::YResourse;
} //namespace Drawing;

namespace Messaging
{
	$unit Core::YMessage;
} //namespace Messaging;

namespace IO
{
	$unit Core::YFile;
} //namespace IO;

namespace Shells
{
	$unit Core::YShell;
	$unit UI::YComponent;
} //namespace Shells;

namespace Timers
{
	$unit Service::YTimer;
} //namespace Timers;

namespace Text
{
	$unit Core::YString;
	$unit Service::YTextManager;
} //namespace Text;

// YCLib 全局命名空间污染列表。

$header "ydef.h"
{
#ifndef YCL_HAS_BUILTIN_NULLPTR
	using ystdex::nullptr;
#endif
} //$header "ysdef.h";

// std 命名空间兼容性污染列表。

$header <platform.h>
{
} //$header <platfrom.h>

//既定 ystdex 命名空间污染列表。

$header YDefinition
{
	using std::ptrdiff_t;
	using std::size_t;
	using std::wint_t;
	using ::ssize_t;
} //$header YDefinition;

$header YStandardExtend
{
	//
} //$header YStandardExtend;

$header YStandardExtend::TypeOperation : header YStandardExtend
{
	using std::integral_constant;
	using std::true_t;
	using std::false_t;

	using std::is_void;
	using std::is_integral;
	using std::is_floating_point;
	using std::is_array;
	using std::is_pointer;
	using std::is_lvalue_reference;
	using std::is_rvalue_reference;
	using std::is_m_object_pointer;
	using std::is_m_function_pointer;
	using std::is_enum;
	using std::is_class;
	using std::is_union;
	using std::is_function;

	using std::is_reference;
	using std::is_arithmetic;
	using std::is_fundamental;
	using std::is_object;
	using std::is_scalar;
	using std::is_compound;
	using std::is_m_pointer;

	using std::is_const;
	using std::is_volatile;
	using std::is_trivial;
//	using std::is_trivially_copyable;
	using std::is_standard_layout;
	using std::is_pod;
	using std::is_literal_type;
	using std::is_empty;
	using std::is_polymorphic;
	using std::is_abstract;

	using std::is_signed;
	using std::is_unsigned;

	using std::is_constructible;
	/*
	using std::is_default_constructible;
	using std::is_copy_constructible;
	using std::is_move_constructible;

	using std::is_assignable;
	using std::is_copy_assignable;
	using std::is_move_assignable;

	using std::is_destructible;

	using std::is_trivially_constructible;
	using std::is_trivially_default_constructible;
	using std::is_trivially_copy_constructible;
	using std::is_trivially_move_constructible;

	using std::is_trivially_assignable;
	using std::is_trivially_copy_assignable;
	using std::is_trivially_move_assignable;
	using std::is_trivially_destructible;

	using std::is_nothrow_constructible;
	using std::is_nothrow_default_constructible;
	using std::is_nothrow_copy_constructible;
	using std::is_nothrow_move_constructible;

	using std::is_nothrow_assignable;
	using std::is_nothrow_copy_assignable;
	using std::is_nothrow_move_assignable;

	using std::is_nothrow_destructible;
	*/
	using std::has_virtual_destructor;

	using std::alignment_of;
	using std::rank;
	using std::extent;

	using std::is_same;
	using std::is_b_of;
	using std::is_convertible;

	using std::remove_const;
	using std::remove_volatile;
	using std::remove_cv;
	using std::add_const;
	using std::add_volatile;
	using std::add_cv;

	using std::remove_reference;
	using std::add_lvalue_reference;
	using std::add_rvalue_reference;

	using std::make_signed;
	using std::make_unsigned;

	using std::remove_extent;
	using std::remove_all_extents;

	using std::remove_pointer;
	using std::add_pointer;

	using std::aligned_storage;
	using std::decay;
	using std::enable_if;
	using std::conditional;
	using std::common_t;
//	using std::underlying_t;
	using std::result_of;
} //$header YStandardExtend::TypeOperation;

//既定 platform 命名空间污染列表。

$header "ycommon.h"
{
	// using newlib;
	using ::iprintf;
	using ::siprintf;
	using ::viprintf;

	// using ystdex;
	using ystdex::const_path_t;
	using ystdex::path_t;
} //$header "ycommon.h";


//既定 YSLib 命名空间污染列表。

$header Adaptor::YAdaptor
{
	using ystdex::errno_t;
	using ystdex::nullptr_t;
	using ystdex::ptrdiff_t;
	using ystdex::size_t;
	using ystdex::ssize_t;
	using ystdex::wint_t;

	using ystdex::noncopyable;

	using platform::const_path_t;
	using platform::path_t;

	using platform::DEF_PATH_DELIMITER, platform::DEF_PATH_SEPERATOR,
		platform::PATHSTR, platform::FILENAMESTR;
	using platform::mmbset, platform::mmbcpy;
	using platform::direxists, platform::chdir, platform::getcwd_n;
	using platform::terminate;
	using platform::HDirectory,
		platform::IsAbsolute, platform::GetRootNameLength;
	using platform::ScreenSynchronize;
	using platform::WaitForInput;
	using platform::GetRTC, platform::ResetRTC;
	using platform::InitVideo;

	namespace KeySpace = platform::KeySpace;
	using platform::Key, platform::KeysInfo, CursorInfo;

	namespace Drawing
	{
		using platform::BitmapPtr, ConstBitmapPtr;
		using platform::Color;
		namespace ColorSpace = platform::ColorSpace;
	} //namespace Drawing;

	namespace Text
	{
		using namespace CHRLib;
	} //namespace Text;
	using Text::ucs4_t, Text::ucs2_t, Text::ucsint_t;

	//! \brief 运行时平台。
	namespace DS
	{
		using namespace platform_ex;
	} //namespace DS;

	//库适配器。

	// Function 。
	//using Loki::Function;

//! \brief 设计模式。
YSL_BEGIN_NAMESPACE(Pattern)
YSL_END_NAMESPACE(Pattern)

	//使用 Loki 小对象。
	//using Loki::SmallObject;

} //$header Adaptor::YAdaptor;

$Adaptor::Container : Adaptor::YAdaptor
{
#ifdef YSL_USE_YASLI_VECTOR
	using yasli::vector;
#else
	using std::vector
#endif
	using std::pair, std::tuple, std::make_pair, std::make_tuple;
	using std::list, std::map, std::set, std::stack, std::queue, std::priority_queue, std::unordered_map, std::unordered_set;
} //$header Adaptor::Container;

$header Adaptor::YReference
{
	using std::bad_weak_ptr;
	using std::const_pointer_cast;
	using std::dynamic_pointer_cast;
	using std::enable_shared_from_this;
	using std::get_deleter;
	using std::shared_ptr;
	using std::static_pointer_cast;
	using std::unique_ptr;
	using std::weak_ptr;
	using ystdex::is_not_null;
	using ystdex::is_null;
	using ystdex::raw;
	using ystdex::reset;
	using ystdex::share_raw;
	using ystdex::unique_raw;
} //$header Adaptor::YReference;

$header Core::YShellDefinition : Adaptor::YAdaptor
{
	using Components::Desktop;

	using Drawing::FontCache;

	using Shells::
	{MainShell, Shell};

	using Text::String;
} //$header Core::YShellDefinition;

$header Core::YMessage : Core::YShellDefinition
{
	using Messaging::Message;
} //$header Core::YCoreUtilities;

$header Core::YShell : Core::YMessage
{
	using Shells::Activate;
	using Shells::FetchShellHandle;
} //$header Core::YShell;

$header Core::YApplication : Core::YMessage
{
	using Messaging::MessageQueue;
} //$header Core::YApplication;

$header Core::YGDIBase
{
} //$header Core::YGDIBase;
$header Core::YGDI : Core::YGDIBase
{
} //$header Core::YGDI;

//$header Core::YResource : Core::YGDI;

$header UI::YComponent : YMessage
{
	using Components::IWidget;
} //$header UI::YComponent;

$header UI::YWidgetEvent : UI::YComponent
{
} //$header UI::YWidgetEvent;

$header UI::YRenderer
{
	namespace Components
	{
		using Drawing::PixelType, Drawing::BitmapPtr, Drawing::ConstBitmapPtr, Drawing::ScreenBufferType, Drawing::Color;

		using Drawing::Point, Drawing::Vec, Drawing::Size, Drawing::Rect;
		using Drawing::Graphics;
	} //namespace Components;
} //$header UI::YRenderer;

$header UI::YWidget : UI::YComponent, UI::YRenderer, UI::YFocus, Core::YResource, UI::YWidgetEvent
{
} //$header UI::YWidget;

$header UI::YControl : UI::YWidgetEvent
{
	namespace Components
	{
		using namespace Drawing;
	} //namespace Components;
} //$header UI::YControl;

$header Helper::YGlobal : Core::YGDIBase
{
	using Devices::DSScreen;
} //$header Helper::YGlobal;

} //$code YSLib;

///

#region synopsis(end)

