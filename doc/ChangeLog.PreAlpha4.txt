/*
	Copyright by FrankHB 2013.

	This file is part of the YSLib project, and may only be used,
	modified, and distributed under the terms of the YSLib project
	license, LICENSE.TXT.  By continuing to use, modify, or distribute
	this file you indicate that you have read the license and
	understand and accept it fully.
*/

/*!	\file ChangeLog.PreAlpha4.txt
\ingroup Documentation
\brief 版本更新历史记录 - PreAlpha4 。
\version r3383
\author FrankHB <frankhb1989@gmail.com>
\since build 400
\par 创建时间:
	2013-04-20 11:19:07 +0800
\par 修改时间:
	2013-09-25 17:50 +0800
\par 文本编码:
	UTF-8
\par 模块名称:
	Documentation::ChangeLog::PreAlpha4
*/

// See "Meta.cpp" for meta discriptions.

$import $HISTORY;

// Scope: [b400, $now];

$now
(
	/ %'YFramework' $=
	(
		/ $dev @ "macro %_yInterfaceHead" @ %'YBaseMacro' $=
		(
			+ "protected defaulted default constructor",
			^ $design "%DefDeDtor for destructor declaration"
		),
		/ DLD "all typedef declarations" @ %'YCLib_(MinGW32)'
			-> "alias declaration",
			// Missed: $since b434.
		/ %'YSLib'.'Core'.'YEvent' $=
		(
			$dep_from "%ystdex::make_expanded";
			+ "constructor support for expandable callable object as \
				initailizer" @ "%GHEvent";
			+ $comp "support for expandable callable types" @ "%GEvent"
		);
	),
	/ %'YBase'.'YStandardEx' $=
	(
		* "no sequence guarantee when %operator, overloaded for pervious call \
			result" @ "function template %seq_apply" $since b303,
		/ DLD "reduced directly nested 'yforward' in
			%ystdex::(decay_forward, decay_copy) calls",
		/ "all %decay_forward calls" -> "'yforward' invocations"
		- DLD "'std::' prefix for" ("names declared by using declaration"
			@ %'TypeOperations') @ "namespace %ystdex except for using \
			declarations and macros",
		- DLD 'public' @ "inherited %std::integral_constant \
			instances(inclucding %std::(true_type, false_type))",
		/ %'Functional' $=
		(
			(
			+ "partial specialization for instances of %std::function for \
				%ystdex::(make_parameter_tuple, return_of)";
			+ $comp "instances of %std::function support for \
				%ystdex::(parameter_of, paramlist_size)"
			),
			+ "specialization of templates %is_covariant for function types",
			(
			$dep_from "variant traits for tuple";
			+ "specialization of templates %is_contravariant for function types"
			),
			(
			+ "function templates %(call_projection; expanded_caller)";
			+ "function template %make_expanded";
			),
			+ "meta operation templates %(make_parameter_tuple_t, return_of_t, \
				parameter_of_t)",
		),
		/ %'Variadic' $=
		(
			+ "constexpr static function %size"
				@ "class template %variadic_sequence",
				// Like %std::integer_sequence::size in C++1y.
			+ $doc $dev "Doxygen group %vseq_operations",
			+ "meta operation templates %(sequence_split, sequence_split_t, \
				sequence_cat, sequence_cat_t, make_successor_t, \
				make_natural_sequence_t, sequence_element, sequence_element_t, \
				sequence_project, sequence_project_t, sequence_reverse, \
				sequence_reverse_t)",
		),
		/ %'TypeOperations' $=
		(
			+ "binary type traits templates %(is_covariant, is_contravariant)";
			$dep_to "variant traits"
		),
		+ %'Tuple' $=
		(
			(
			$dep_from "variant traits";
			+ "specialization of templates %(is_covariant, is_contravariant) for \
				%std::tuple"
			$dep_to "variant traits for tuple";
			),
			(
			$dep_from %'Variadic';
			+ "specialization of templates %(sequence_cat, sequence_element, \
				sequence_project, sequence_reverse) for %std::tuple"
			)
		)
	)
),

b446
(
	/ %'YFramework' $=
	(
		/ %'Service' $=
		(
			/ %'YDraw' $=
			(
				/ "function %PlotPixel for %Size" -> "accepting %Rect",
					// Conversion constructor of %Rect is used.
				+ "functions %(PlotHLineSeg, PlotVLineSeg)",
				* "function %DrawCircle" $since b394;
					// See $2013-09 @ %Documentation::Workflow::Annual2013.
				+ "function %FillCircle"
			),
			* "blitting boundary and overload for non-zero source offset"
				@ %'YBlit' $since b370 $=
			(
				* "wrong result" @ "function %BlitBounds" $=
				(
					* "wrongly ignored source offset for minimal boundary \
						components",
						// This caused result left/top boundary wrong for \
							positive source offset.
					* "missing check for maximal boundary components"
						// The maximal boundary components should be less than \
							source size components, otherwise access could be \
							out of range for negative source offset.
				);
				* "out of minimal source boundary for negative source offset"
					@ "function template %Blit"
			)
		),
		* "wrong offset and clip area for blitting" @ "implementation"
			@ "member function %ImageBrush::DefaultUpdate" @ %'UI'.'YBrush'
			$since b443
	)
),

b445
(
	/ %'YFramework' $=
	(
		/ %'YSLib' $=
		(
			/ %'UI' $=
			(
				/ @ "class %GUIState" @ %'YGUI' $=
				(
					/ $lib $design "deferred coordinate computation for \
						wrapped leaving event" @ "member function %Wrap",
						// A little performance improved when the event should \
							not be triggered.
					/ "%ControlLocation" => "%CursorLocation"
				),
				/ @ "class %BorderResizer" @ %'Border' $=
				(
					+ "member declaration 'bool HostMode = false;'",
					+ "support for host mode to adjust original boundary after \
						moving"
				)
			),
			/ %'Service' $=
			(
				/ %'YBlit' $=
				(
					* "increment types" @ "%class BlitScannerLoop" @
						$since b438,
						// Unsigned type wrongly used instead of signed type. \
							This would cause access violation on calling \
							('Blit<true, false>', 'Blit<false, true>').
					(
					/ "function template %BlitScale with 4 full specializations"
						-> "function template %BlitScaleComponent with 2 full \
						specializations";
					$dep_to "%BlitScale"
					)
				),
				(
				$dep_from "%BlitScale";
				* $comp "wrong specializations of function template %BlitScale \
					for ('<true, false>', '<false, true>')" $since b187
				);
				* $comp "access violation on calling blit for left-right or \
					up-down swapping only mode" $since b187;
			)
		),
		/ %'Helper' $=
		(
			/ "touch dragging handler checked for handle flag"
				@ "function %DragWindow" @ %'HostedUI',
				// Same as b444.
			/ @ "class %HostRenderer" @ %'HostedUI' $=
			(
				* "missing resizing buffer and host window" $since b384,
				/ "supported automatically moving host window when bound \
					widget location is not origin";
				(
					$dep_from %('UI'.'Border', 'Helper'.'InputManager');
					/ "supported moving host window for border resizer"
				)
			)
		)
		/ @ "namespace %platform_ex::Windows" %'YCLib_(MinGW32)'.'Win32GUI' $=
		(
			(
			+ "class %ScreenBuffer with swap functions and user-defined move \
				assignment operator";
			+ 'using ScreenBuffer::Resize;' @ "class %ScreenRegionBuffer"
			),
			+ "member function %WindowReference::((GetClientLocation, \
				GetClientSize; GetClientBounds), SetClientBounds)";
			+ ('using WindowReference::GetClientLocation;',
				'using WindowReference::GetClientSize;',
				'using WindowReference::GetClientBounds;',
				'using WindowReference::SetClientBounds;') @ "class %Window"
		)
	)
),

b444
(
	/ %'YFramework'.'YSLib' $=
	(
		/ "dragging and touch held handler implementation"
			@ %('YSLib'.'UI', 'Helper'.'HostedUI') ^ "%GUIState::\
			ControlLocation" ~ "%GUIState::LastControlLocation";
		/ %'UI' $=
		(
			- $revert(b169) "last control location"
				// To prevent potential misuse of last location during \
					different widgets independently focused by common GUI state.
				$= (- "data member %LastControlLocation" @ "class %GUIState"
					@ %'YSLib'.'UI'),
			/ %'YWidgetEvent' $=
			(
				$dep_from %'Core'.'YMessage';
				+ "UI message exception class %UIEventSignal"
			),
			/ "touch dragging handler checked for handle flag" @ %'YControl',
				// Now dragging behavior can be override before handled \
					through setting 'Handled' member of cursor event argument.
		),
		/ %'Core' $=
		(
			+ "message exception classes %(MessageException; MessageSignal)"
				@ "namespace %Messaging" @ %'YMessage';
			/ "handled for %Messaging::MessageSignal"
				@ "member function %Application::OnGotMessage" @ %'Application'
		),
		* "maximum value overflow when destination size component less than \
			coordinate component of destination point" @ "function %BlitBounds"
			@ %'Service'.'YBlit' $since b438;
			// This could cause invalid iterator access when source area \
				totally out of destination buffer boundary.
		+ "enum class BorderArea; class %BorderResizer" @ %'Border'
	),
	+ $dev $doc "Doxygen group 'exception_types' for exception types"
		@ %'YBase'.'YDefinition',
	/ %'YReader' $=
	(
		(
		$dep_from %'YFramework'.'YSLib'.'UI';
		+ "border of 4px" @ "setting panel" @ %'file explorer',
			// Now invisible or translucent.
		),
		(
		$dep_from  %'YFramework'.'YSLib'.'Service'.'YBlit';
		* $comp "crashed after quickly dragging around the information window"
			$since b438 @ %'text reader'
		)
	)
),

b443
(
	/ %'YFramework' $=
	(
		/ %'YSLib'.'UI' $=
		(
			(
			+ "function %InvalidateParent" @ %'YWidget';
			/ $lib "improved performance of default move and touch handling"
				^ "%InvalidateParent" ~ "%Invalidate" @ %'YControl'
			),
			+ "constructors for references to %CompactPixmap" @ "class %Image",
			/ %'YBrush' $=
			(
				/ "alias template %GBrushUpdater as std::function accetped 2 \
					offset parameters",
				/ "class %ImageBrush" $=
				(
					/ "types of updater",
					/ "member %Offset"
						-> "split to member %(DstOffset, SrcOffset)",
					+ "support for painting according to destination offset"
					// The old member %Offset is source offset.
				),
				(
				$dep_from %'Border';
				/ "class %(BorderStyle, BorderBrush)" @ %'YBrush' >> %'Border'
				)
			),
			+ %'Border',
			/ DLD "simplified scroll bars initialization" @ %'Scroll',
			(
				+ "event enumerator %ClickAcross" @ %'YWidgetEvent';
				+ "%ClickAcross support" @ "class %GUIState" @ %'YGUI'
			)
		),
		+ "middle button support" @ "class %InputManager" @ "platform %MinGW32",
		/ DLD "ensured all initializers for aggregate initialization"
			^ "preferred ISO C++11 braced initializers" ~ "equal initializers"
	),
	/ %'YReader'
	(
	$dep_from %'YFramework'.'YSLib'.'UI'.'YControl';
	/ $comp "about window colors changed only for area clipped by the desktop"
		@ %'ShlAbout'
	),
	/ DLD "simplified indents of all multi-line 'yunseq' blocks"
),

b442
(
	/ %'YFramework' $=
	(
		/ %'YCLib'.'Video' $=
		(
			+ "integer type conversion functions"
				@ "class templates %(BGRA, RGBA)" @ %'Video';
		),
		/ %'YSLib'.'Service' $=
		(
			/ "implementation" @ "pixel blending" @ "platform %DS",
				// Passing by reference for pixels makes it as efficient as \
					integer type pixel format as b440, and smaller binary \
					size(as same as b441).
			* "non-normalized integer type used as pixel type for blending"
				@ "platform %MinGW32" $since b440;
				// This made the result less precise and would underflow in \
					certain cases.
			+ %'YPixel' $=
			(
				+ "namespace %Shaders" $=
				(
					$dep_from %'YBlit';
					/ DLD "non-specialized blending template supported alpha \
						bits as template argument",
					+ DLD "static assert of alpha bits range"
						@ "specialized template for %RGBA<5, 5, 5, 1>"
					- "width specified from template paramter",
					+ "template functions %(BlendComponent, BlendCore,
						2 Blend)",
					/ @ "template class %GPixelCompositor" $=
					(
						$dep_from %'YBase'.'YStandardEx'.'Rational'
						+ $dev "static assertions to check some non-normalized types",
							// The member templates for alpha composite need normalized \
								values. Direct use of some integral types is forbidden by \
								static assertions.
						+ "explicit specialization 'struct GPixelCompositor<1, 0>'";
						/ $design "reusing with private inheritance"
							~ "public inheritance of specializations except for \
							'struct GPixelCompositor<1, 0>'"
					),
					+ "function templates %(CompositeComponent; 3 Composite)",
					+ DLD "static assertions for alpha blending types"
				)
			),
			/ @ "namespace %Drawing" @ %'YBlit' $=
			(
				*= $dev "wrong use of 'yconstexpr' for member functions and \
					function templates" @ "class template %GPixelCompositor"
					$since b440
					$= ("all 'yconstexpr' -> 'yconstfn'");
				/ "class template %GPixelCompositor, structs %(
					BlitTransparentPoint, BlitAlphaPoint)"
					>> ("namespace %Shaders" @ %'YPixel'),
				/ "class template %GPixelBlender" -> ("blending templates"
					@ "namespace %Shaders" @ %'YPixel'),
			)
		)
	),
	/ %'YBase'.'YStandardEx' $=
	(
		+ "unary type trait template %is_normalizable" @ %'Rational',
		/ "function template %ystdex::raw" @ %'Memory' => "%get_raw"
	)
),

b441
(
	/ %'YFrmaework' $=
	(
		/ %'YSLib' $=
		(
			/ %'Service'.'YBlit' $=
			(
				- "alias %MonoIteratorPair",
				* $dev "differenence for operands of conditional expressions",
					@ "some specilizations of pixel compositor" $since b440,
				(
				$dep_from %'YAdaptor';
				/ $dev "implemented specialization of pixel blending with \
					%PixelType" ~ "integer type" @ "platform %DS"
				)
			),
			/ %'UI'.'YBrush' $=
			(
				+ "alias template %GBrushUpdater";
				/ @ "class %ImageBrush"
				(
				+ "static member function %DefaultUpdate",
				+ "member GBrushUpdater<const Drawing::Image&> \
					Update = DefaultUpdate;",
				+ "updater support" @ "member function %operator()",
				/ "member %Image" => "%ImagePtr"
				)
			),
			/ %'Adaptor' $=
			(
				/ %'Image' $=
				(
					* "buffer overflow" @ "loading UCS-2 file name"
						@ "class %HBitmap" @ %'Image' $since b431
						// Overflow would happen when conversion from UCS-2 \
							string to ANSI for extension check.
					+ "support for R5G5B5 format"
						@ "static member function %ImageCodec::Convert"
				),
				(
				$dep_from %'YCLib'.'Video';
				+ "using %platform::(BGRA, RGBA)" @ %'YAdaptor'
				)
			)
		),
		/ @ "namespace %platform" @ %'YCLib'.'Video' $=
		(
			+ "template class (XYZATrait; BGRA, RGBA)";
			/ "pixel type alias" ^ "%BGRA" @ "platform %MinGW32",
			/ @ "platform %DS" $=
			(
				/ "pixel type alias" ^ "%RGBA",
				+ "constructor accepting %ColorSet directly" @ "class %Color"
			);
			/ $dev "unified underlying type of color space members as member \
				of %PixelType",
			+ DLD "alignment constraints" @ "pixel types"
				// To ensure the pixel type has the same alignment as original \
					type on DS, which is significant efficient, though still \
					significant less efficient on painting under release \
					configuration than last revision.
		)
	),
	+ $doc $dev "Doxygen command '\relates' for some non-member function \
		declarations outside class scope"
),

b440
(
	/ %'YBase'.'YStandardEx' $=
	(
		/ %'Rational' $=
		(
			+ "static member function %get for defined speciliazations"
				@ "class template %normalized_max",
				// Since the 'value' was not defined, only non-odr using was \
					allowed.
			* "ambiguous binary relation operations between %fixed_point values"
				$since b260,
				// With constexpr restrictions(see $KNOWN_ISSUE), these \
					operations are not available during translation.
				$= (+ "binary %operator(==, !=, <, >) for %fixed_point"
					@ "namespace %ystdex")
			/ "conversion function" @ "class template %fixed_point"
				-> "constexpr function",
			(
			$dep_from "%modular_arithmetic"
			+ "specialiaztion of %modular_arithmetic for %"fixed_point"
			)
		)
		/ %'CStandardInteger' $=
		(
			+ "meta operation template %modular_arithmetic";
			+ "binary trait template %have_same_modulo"
		),
		/ %'TypeOperation' $=
		(
			+ $dev "alias declarations %(remove_const_t, remove_volatile_t, \
				remove_cv_t, add_const_t, add_volatile_t, add_cv_t, \
				remove_reference_t, add_lvalue_reference_t, \
				add_rvalue_reference_t, make_signed_t, make_unsigned_t, \
				remove_extent_t, remove_all_extents_t, remove_pointer_t, \
				add_pointer_t, aligned_storage_t)" @ "namespace %ystdex"
				// For C++1y compatibility. There seems no %std::align_union \
					implemented by libstdc++, so %align_union_t is deferred.
			/ "macro %YB_TYPE_OP_TEST_2 supported for use out of namespace \
				%ystdex",
			(
			+ "macro %YB_HAS_MEMBER";
			+ "unary type trait template %has_mem_value"
			)
		)
	),
	/ %'YFramework'.'YSLib'.'Service' $=
	(
		/ %'YBlit' $=
		(
			(
			+ "template class %GPixelCompositor",
			/ "merged class template %GPixelBlenderBase"
				-> "class template %GPixelBlender";
			- $comp "blit rounds",
				// In fact the removal of the round value make it more precise \
					to value calculated using floating point numbers.
			),
			+ "class template %BlitLineLoop",
			/ "2 function templates %BlitTransparentPixel"
				-> "class template %BlitTransparentPoint",
			/ "2 function templates %BlitAlphaPoint" -> "class template",
			/ $design "functor template parameter put after iterators"
				@ "member function template %operator()"
				@ "class tempalte %BlitScannerLoop",
			- "class templates %(BlitBlendLine, BlitTransparentLine)
		);
		+ "function template %BlitGlyphPixels" @ %'CharRenderer'
	),
	(
	$dep_from %'YBase'.'YStandardEx'.'TypeOperation';
	^ DLD "alias for type traits as possible except for \
		%YFramework::YBaseMacro" ~ "raw type traits";
	)
),

b439
(
	/ %'YFramework'.'YSLib' $=
	(
		* $dev $build "wrong case of including header %YBlit"
			@ "file %textlist.cpp" @ %'UI' $since b319,
			// It can cause build fail on case-sensitive file system.
		* $comp "class template %MoreConvertible" @ %'Core'.'YCoreUtilities'
			$since b206
	),
	/ %'YBase' $=
	(
		+ "alias declaration %ystdex::raw_tag" @ %'YDefinition',
		/ %'YStandardEx' $=
		(
			/ %'Rational' $=
			(
				(
				$dep_from %'YDefinition';
				^ DLD "%ystdex::raw_tag" ~ "private alias declaration \
					%internal_construct_tag";
				* $comp "specialization of %std::numeric_limits for \
					%ystdex::fixed_point" $since b260;
					// Missing 'typename' for internal implementation.
				);
				/ @ "class template %fixed_point" $=
				(
					/ DLD "overloaded default parameter types"
						@ "SFINAE constructor templates",
					+ "constructor with 2 parameters as fraction",
					+ "raw value constructor"
					/ "restricted conversion template for arithmetic types",
					+ "constructor templates for %fixed_point with other base \
						types",
					/ DLD "overloaded multiplying algorithm implementations \
						for signed and unsigned types to avoid possible \
						warning",
					/ "operators inheritance" ^ "class template %operators"
						@ "class template %fixed_point",
						// The modulo is not implemented yet.
					+ "member function %get"
				),
				(
				+ "template partial specialization %std::common_type for 2 \
					%ystdex::fixed_point";
				* "ambiguous binary arithmetic operations between %fixed_point \
					values" $since b260
					$= (+ "binary %operator(+, -, *, /) for %fixed_point"
						@ "namespace %ystdex")
				),
				+ "class template %normalized_max",
				- "function template %ystdex::exp2u"
			)
		),
		/ $dev @ "namespace %ystdex" @ %'TypeOperation' $=
		(
			+ 'using std::underlying_type;';
			+ "alias declarations %(decay_t, enable_if_t, conditional_t, \
				common_type_t, underlying_type_t, result_of_t)"
				// For C++1y compatibility. There seems no %std::align_union \
					implemented by libstdc++, so %align_union_t is deferred.
		),
		(
		+ %'CStandardInteger';
		/ "meta operation template %make_fixed_width_int" @ %'TypeOperation'
			-> "%make_width_int with %('int_least*_t', 'int_fast*_t') \
			support and without non-exact width defauted types support"
			@ %'CStandardInteger',
		/ "meta operation templates %(integer_width, make_signed_c)"
			>> %'CStandardInteger'
		),
		/ @ %'Operators' $=
		(
			* "2nd commutative operator wrongly implemented" @ %'Operators'
				$since b260;
				// Modifying const reference which is ill-formed if \
					instantiated.
			- "all templates with spelling 'euclidian'",
				// Boost.Operators is compatible with both spellings.
			(
			/ "all member" @ "namespace %operators" >> "namespace %ystdex",
			+ "class template operators2";
			+ "class template operators"
				// Compatible with Boost.Operators.
			)
		)
	),
	(
		$dep_from %'YBase'.'YStandardEx'.'TypeOperation';
		^ DLD "alias for type traits as possible except for \
			%YFramework::YBaseMacro" ~ "raw type traits";
	)
),

b438
(
	/ %'YFramework'.'YSLib'.'Service' $=
	(
		/ "function template %BlitChar" @ %'CharRenderer' -> "%BlitGlyphLines \
			adapted to custom function object as line scanner",
		/ @ %'YBlit' $=
		(
			/ "2 function templates %BlitLine"
				-> "class template specializations %BlitLine with support for \
				parameterized iterator types",
			/ "extended all operations of pixel pointers to iteration types",
			- DLD "macro %YSL_FAST_BLIT and blit test code",
			/ "objects %'BLT_*', functions %('blit*', component_blend) except \
				for %biltAlphaPoint"
				-> "class templates %(GPixelBlenderBase; GPixelBlender)"
				// Now blending functions for different pixels can be used in the same \
					platform configuration.
			/ "function templates %biltAlphaPoint" => "%BiltAlphaPoint",
			/ "explicitly kept untouched value if boundary is not applicable"
				@ "function %BlitBounds",
			* "ignored boundary calculation" @ "%RectTransformer::operator()"
				$since b189,
				// Since %BlitBounds actually ensured all the arguments to be \
					initialized, it had no effect. Now the constraints \
					violation effects because %BlitBounds explicitly kept \
					untouched delta values.
			/ $revert_ex(b437) $design "all parameter types of blit \
				function" ^ "%SPos" ~ "%ptrdiff_t",
			^ $revert_ex(b437) "unsigned delta types and values" ~ "%ptrdiff_t"
				// Since the blit algorithms guarantees the non-negative delta \
					values and indices.
			(
			/ "return type @ %BlitScale" -> "%size_t" ~ "%ptrdiff_t",
			/ "all delta parameter types" ^ "%SDst" ~ "%ptrdiff_t",
			- "all non-negative checks" @ "block and scan line loop \
				implementations"
				// Zero checks are still handled. To be some bit efficient.
			)
			- "blit thresholds" @ "alpha composition algorithms"
		)
	)
),

b437
(
	* "significant FPS lag on DS" @ "file explorer" @ %'YReader' $since b436,
		// About 5x lag. Hack should have been considered for performance on \
			per-frame call.
	/ %'Tools' $=
	(
		+ %'CreationTimeManager',
		+ DLD "readme file" @ "VC++ projects" @ %'PredefinedMacroDetector'
	),
	/ %'YFramework' $=
	(
		+ "member function %Win32Exception::GetMessage"
			@ %'YCLib_(MinGW32)'.'MinGW32',
		/ %'YSLib' $=
		(
			+ "member 'Point Offset;' as image drawing offset"
				@ "class %ImageBrush" @ %'UI'.'YBrush',
			/ %'Service'.'YBlit' $=
			(
				/ $design "all interface and implementation of blit function"
					^ "%ptrdiff_t" ~ "%int",
				(
				+ "2 function templates %BlitTransparentPixel";
				+ "class template %BlitTransparentLine";
				- "class template %BlitTransparentLoop
				),
				(
				+ "class template %BlitBlendLine";
				- "class template %BlitBlendLoop"
				),
				- DLD "all explicit instantiation of %Blit" @ "file %yblit.cpp",
				/ "function template %Blit adapted to custom function object \
					as loop provider",
				/ "function %BlitScan accepted function object"
					~ "function object reference",
					// %std::ref should be used if copying is not intended.
				(
				+ "class template %BlitScannerLoop";
				+ "function template %BlitLines"
				);
				- "class templates %(BlitTransparentLoop, BlitBlendLoop)",
				/ $design "templates with function parameter of iterator types \
					at first after function object"
					// Thus other function parameters can be convenient for \
						passing through parameter pack.
			)
		)
	),
	+ $doc DLB "number of members of %std::placeholders requirement";
		// Currently _6 is needed by %YBlit.
),

b436
(
	/ %'YFramework' $=
	(
		+ "macro %(DeclDynWidget; DeclDynWidgetN; DeclDynWidgetN)"
			@ %'YSLib'.'UI'.'Loader',
		+ $dev '#define YCL_Device_Cursor_FixedKey 1' @ "platform %DS"
			@ %'YCLib'.'Platform'
			// See $2013-08 @ %Documentation::Workflow::Annual2013.
	),
	/ DLD %'YReader' $=
	(
		/ "compacted NPL translation unit of about UI as LISP-style",
		/ "partial implementation" @ "setting UI"
			^ "NPL dynamic widget loading",
			// Layout manually adjusted.
		/ DLD "partial implementation" @ "explorer shell"
			^ "NPL dynamic widget loading"
	),
	/ "function %std::swap for %ystdex::any" @ %'YBase'.'YStandardEx'.'Any'
		>> "namespace %ystdex",
		// ADL is preferred.
	/ $repo "engineering fault tagged" ^ "hg bookmark" ~ "hg tag",
	/ "library files name with postfix '.d'" @ "debug configuration"
		@ "platform %MinGW32" $=
		// This makes DLL files of both debug and release configurations can \
			be placed in the same directory, which makes debug and path \
			confituration convenient.
	(
		/ $dev @ "configuration %debug" $=
		(
			/ "target %libYBase.a" => "%libYBased.a"
			/ "target %libYFramework.a" => "%libYFrameworkd.a"
		),
		/ @ "configuration %debug_DLL" $=
		(
			/ "target %YBase.dll" => "%YBased.dll"
			/ "target %YFramework.dll" => "%YFrameworkd.dll"
		)
	)
),

b435
(
	/ %'YFramework' $=
	(
		- "macro %(YSL_BEGIN, YSL_END, YSL_BEGIN_NAMESPACE, YSL_END_NAMESPACE)"
			@ %'YBaseMacro',
		/ "macro %YCL_MINGW32" @ %'YCLib'.'Platform' => "%YCL_MinGW32",
		/ %'YCLib_(MinGW32)' $=
		(
			/ %'MinGW32' $=
			(
				* "result of '::GetLastError()' might be overriden in \
					initializing argument of exception object before finishing \
					checking the error code" @ "macro %YF_Raise_Win32Exception"
					 $since b426,
					// The initialization of %std::string object might call \
						Win32 API and thus have effect on Win32 error code. \
						This means '::GetLastError()' should be called before \
						creating the exception object, or wrong error code \
						might be initialized.
				/ @ "class %Win32Exception" @ %'MinGW32' $=
				(
					+ 'typedef ::DWORD ErrorCode;';
					+ "member function 'explicit operator ErrorCode()'",
					(
					+ "static member function %FormatMessage";
					/ "initialized exception message with Win32 error message"
					)
				),
				+ "class %RegisterKey; function %CheckWine" @ %'MinGW32'
			),
			/ %'Win32GUI' $=
			(
				+ "class %(ScreenBuffer; ScreenRegionBuffer)",
				+ "alpha premultiplying support" @ "screen buffer",
				+ "2 functions %UpdatePremultiplied"
					@ "class %WindowMemorySurface"
			)
		),
		/ %'Helper' $=
		(
			(
			$dep_from %'YCLib_(MinGW32)'.'Win32GUI';
			/ "supported host transprent by per pointer bitmap alpha value"
				@ "class %Host::Window" @ "platform @MinGW32"
				@ %'HostWindow' $=
				// Top level hit test is also based on non-zero alpha value.
			(
				+ "member data %(UseOpacity, Opacity)",
				+ "member function %UpdateFrom"
			)
			),
			- $revert(b431) "automatically set opacity as '0xFF' when \
				'WS_EX_LAYERED' set" @ "function %ShowTopLevel"
				@ "platform %MinGW32" @ %'Helper'.'HostedUI'
		)
	),
	+ "macro %yunused" @ %'YBase'.'YDefinition'
),

b434
(
	/ "all anonymous struct typedef declarations"
		-> "named struct declarations",
		// See $2013-08 @ %Documentation::Workflow::Annual2013.
	/ DLD "all typedef declarations except in directory %3rdparty"
		-> "alias declarations",
		// Ditto.
		// $b447: @ %YCLib_(MinGW32) missed.
	/ %'YFramework'.'YSLib'.'UI' $=
	(
		/ @ %'Loader' $=
		(
			/ "class template %GWidgetFactory"
				-> "function templates %(CreateUniqueWidget, RegisterLoader)",
			+ "template class %GWidgetRegister";
			(
				/ "alias %GWidgetCreatorMap accept function parameters \
					directly",
				- "function templates %(FetchWidgetMapping, CreateWidget)",
				/ "functions %(DetectWidgetNode, TransformUILayout, \
  					ConvertUILayout)" -> "class %WidgetLoader";
				/ $comp "widget loader implemented with no static duaration \
					object and being friendly to multithreading without data \
					race"
			),
			+ "class %DynamicWidget"
		),
		(
		/ @ "class %GUIState" @ %'YGUI' $=
		(
			// Check of offset for touch held event now is removed for client \
				hanlders.
			- "invalid offset check" @ "basic cursor handler for %TouchHeld",
			+ "member function %CheckOffset"
		);
		+ "function %OnTouchHeld_DraggingRaw for user-specified dragging target"
			@ %'YControl'
		)
	),
	* DLB $revert(b432) "wrong location of VC++ project file for projects \
		%YFramework_(MinGW32)" $since b432,
	/ %'YReader' $=
	(
		$dep_from %'YFramework'.'YSLib'.'UI';
		+ "dynamic widget loader initialization";
		/ DLD "implementation" @ "about UI" ^ "NPL dynamic widget loading"
			// This adds an additional panel and enlarges binary \
				significantly. Here it is not necessary, just being used as an \
				demo.
	)
),

b433
(
	/ $doc $dev 'Documentation' $=
	(
		+ $doc "basic namespace rules" @ %'NPL',
		(
		+ "workflow document %Workflow.2013.txt";
		+ "labeled paragraph %$STATE for current state" @ %'Meta'
		)
	),
	/ %'YFramework'.'YSLib' $=
	(
		/ %'UI' $=
		(
			- $revert(b240) "releasing focus on destruction" @ "class %Widget",
				// For convenience of unspecified order of widget destruction.
			+ %'Loader' @ %'UI' $=
			(
				+ "functions %(ParseRect, DetectWidgetNode, CheckChildName, \
					TransformUILayout, ConvertUILayout, AccessWidget)",
				+ "template alias %GWidgetCreatorMap",
				+ "function templates %(FetchWidgetMapping, CreateWidget, \
					2 AccessWidget)",
				+ "class template %GWidgetFactory"
			)
		),
		/ %'Core'.'ValueNode' $=
		(
			/ "member function %GetNode" @ "class %ValueNode" => "%at",
			+ "function %AccessNode for container pointer";
			/ $design "inlined function %AccessNode for container reference"
		)
	),
	/ %'YBase'.'YStandardEx' $=
	(
		/ %'Path' $=
		(
			/ @ "class template %path" $=
			(
				(
				+ "constructor with base rvalue reference as parameter";
				/ DLD "delegating other non-copy/move constructors with base \
					temporaries"
				),
				+ "constructor template with base parameters"
			)
			* "type error implementation" @ "member function %is_delimiter"
				@ "template class specialization %file_path_norm" $since b409
		),
		- "function templates %ystdex::at" @ %'Container'
	),
	/ DLD "normalized template parameters as convention: %(_tCont, _tSeqCont)" \
		=> "%(_tCon, _tSeqCon)"
),

b432
(
	* DLB "missing relocation of VC++ project file for projects %(YBase_(DS), \
		YFramework_(DS), YFramework_(MinGW32))",
	/ %'YBase' $=
	(
		/ %'YDefinition' $=
		(
			/ @ '!defined(NDEBUG)' @ %'YDefinition' $=
			(
				+ "macro definition %YB_Use_YTrace",
				/ "macro %YB_USE_YASSERT" -> "macro %YB_Use_YAssert"
			),
			(
			/ $dep_from %'YStandardEx'.'CAssert';
			/ "macro %(yconstraint, yassume)" @ %'YDefinition'
				>> %'YStandardEx'.'CAssert'
			)
		),
		/ %'YStandardEx' $=
		(
			/ $dev "unified format attribute with 'printf'" ~ 'ms_printf'
				@ "%sfmt<char>" @ %'YStandardEx'.'String'
				// It seems that macro '__USE_MINGW_ANSI_STDIO' is always \
					defined for C++.
			+ %'CAssert' $=
			(
				/ @ 'YB_USE_YTrace' $=
				(
					+ "function %ytrace",
					+ "macro %YTrace"
				)
			)
		)
	),
	/ %'YFramework' $=
	(
		/ %'YCLib'.'YCommon' $=
		(
			(
				+ "namespace %Discriptions"
					$= (+ "enumeration %RecordLevel");
				$dep_to "%platform::Discriptions"
			),
			(
			/ $dev "assertion function" $=
			(
				/ "parameter order and assert string",
				^ DLD 'std::terminate' ~ "'std::abort' as termination",
				^ "standard output to 'stderr'"
					~ "platform dependent output function"
			);
			/ "(functions %yassert, macro %YAssert)"
				@ %'YCommon' >> %'YBase'.'CAssert',
			);
			$dep_from %'YBase'.'YStandardEx'.'CAssert';
			/ @ 'YB_USE_YTrace'
				$= (+ "macros %(YF_TraceLevel, YTrace)")
		);
		/ %'YSLib' $=
		(
			/ %'Adaptor' $=
			(
				- "macro definition %YB_USE_YASSERT" @ '!defined(NDEBUG)'
					@ %'Configuration',
				(
				$dep_from "%platform::Discriptions";
				+ 'using namespace platform::Discriptions;'
					@ "namespace %YSLib" @ %'YAdaptor';
				$dep_to "exception level"
				)
			),
			/ %'Core' $=
			(
				/ $dev %'YException' $=
				(
					$dep_to "exception level";
					^ "typename %RecordLevel as member %LevelType"
						@ "exception class %LoggedEvent"
				),
				/ %'ValueNode' $=
				(
					/ "merged 2 function templates %AccessChild",
					+ "2 functions %AccessNodePtr",
					+ "function template %AccessPtr for type \
						'const ValueNode*'",
					+ "2 function templates %AccessChildPtr"
				),
				* $dev "missing excluding of 'GEvent&'" @ %'GEvent'
					@ "member template %operator= with 1 function parameter"
					@ "class template %GEvent" $since b293
					// This would cause recursive calls by self.
			),
			(
			/ $dep_from %'Core'.'YException',
			/ DLD "throwing exceptions" ^ "different exception level"
				@ (%'Adaptor'.'Font', 'Service'.'YGDI');
			)
		)
		/ @ "platform MinGW32" @ %'Helper' $=
		(
			/ DLD "all ('std::make_shared', 'ystdex::make_shared', \
				'ystdex::make_unique')" -> "ADL use without qualification",
				// Non-MinGW32 code still can't use this substitution, because \
					G++ 4.7.1 in devkitARM release 41 doesn't support. See \
					$known_issue_b298.
			(
			$dep_from %'YCLib_(MinGW32)'.'Win32GUI';
			/ "window class registration" ^ ("trace",
				("exception class %Win32Exception" ~ "%LoggedEvent"))
			),
			* "unhandled %Win32Exception" @ "host window thread"
				@ "window closed" $since b426
				// Exit code is %::NTSTATUS error \
					'STATUS_STACK_OVERFLOW'(0xC00000FD).
		),
		* $comp "missing excluding of 'ValueNode&'"
			@ "constructor template with 1 function parameter"
			@ "class %Configuration" @ %'NPL'.'Configuration' $since b376,
		+ "class %WindowClass" @ %'YCLib_(MinGW32)'.'Win32GUI'
	),
	+ $doc "%Documentation::NPL",
	* $dev "header and source locations" @ "makefiles" @ "platform DS"
		@ "project %(YBase_DS, YFramework_DS)" $since b431
),

b431
(
	/ %'YFramework' $=
	(
		/ %'YSLib' $=
		(
			/ @ "class %HBitmap" @ %'Adaptor'.'Image' $=
			(
				+ "constructor with file name and specified image format",
				+ "constructor for different types of file names",
				/ "char-based file names with UTF-8 support" @ "constructors"
			),
			/ %'UI'.'Console' $=
			(
				/ "disabled platform dependent functionality"
					@ "class %Console";
				- $dev "header dependency" @ ("%DSMain" @ %'Helper')
			)
		),
		/ "functions %platform_ex::(UTF8ToMBCS, WCSToMBCS)" @ "platform \
			%MinGW32" @ %'YCLib'.'YCommon' >> ("namespace %platform_ex::Windows"
			@ %'YCLib_(MinGW32)'.'MinGW');
		/ @ "namespace %platform::Windows" @ %'YCLib_(MinGW32)'.'MinGW' $=
		(
			+ "3 functions %MBCSToWCS",
			+ "inline functions for native encoding conversion with length of \
				C style strings calculated at runtime;
			^ "'CP_ACP' as default arguments" @ "encoding transformation \
				functions" @ %'YCLib_(MinGW32)'.'MinGW';
		),
		/ %'Helper' $=
		(
			/ @ "function %ShowTopLevel" @ %'HostedUI' $=
			(
				/ "blocked wating window pointer until being non-null";
				/ "set default opacity with '0xFF'";
				$comp $revert(b430) "windows maybe initialized being fully \
					transparent"
			),
			+ %'Host'
		),
		(
		+ %'Helper_(DS)';
		/ %('DSMain'; 'Shell_DS') @ %'Helper' >> %'Helper_(DS)'
		)
	),
	+ "top level directory %Tools"
		$= (+ $dev "project %PredefinedMacroDetector"),
			// Generator to detect predefined macros. Generated file is a C++ \
				source file. Use preprocessing command line like "gcc -E" then \
				compile in hosted environment to get macros for cross compilers.
	+ DLD "common pre-defined macros" @ "platform %DS" @ "VC++ projects",
	+ $dev $repo "pattern globs ('__gen_*.*', '*.pdb', '*.idb', '*.ilk', \
		'*.exe', '*.obj', '*.tlog', '*.lastbuildstate', '*.unsuccessfulbuild')"
		@ "file %.hgignore",
	/ "3rdparty libraries" $=
	(
		/ @ "library %FreeImage" $=
		(
			/ DLD @ "all modified source files" $=
			(
				/ "all EOL markers are normalized as CR+LF",
				/ "removed all spaces at end of lines",
				/ "saved as UTF8 + BOM"
			),
			- "function only supported in Win32: %(FreeImage_LoadU, \
				FreeImage_SaveU, FreeImage_GetFileTypeU, \
				FreeImage_GetFIFFromFilenameU, FreeImage_JPEGTransformU, \
				FreeImage_JPEGCropU"),
			/ "excluded files ('Source/FreeImageToolkit/JPEGTransform.cpp',
				'Source/MetaData/XTIFF.cpp')" @ "source list";
			/ @ "recompiled library %FreeImage" $=
			(
				^ "libjpeg-turbo 1.3.0" ~ "libjpeg-8d" $=
				(
					/ "overwritten source files",
					+ "custom configuration headers %(jconfig.h, config.h)"
						@ 'Source/LibJPEG/',
					+ "generated SIMD configuration file %jsimdcfg.inc"
						@ 'Source/LibJPEG/simd'
					+ "SIMD assembly files" @ "source list",
					+ "modified MinGW makefile"
				),
				^ "libpng-1.6.3 with stadard configuration header file \
					%Source/LibPNG/pnglibconf.h" ~ "libpng-1.5.13",
				^ "zlib-1.2.8" ~ "zlib-1.2.7"
			)
		),
		* $doc "missing license for FreeImage" $since b417;
		+ $dev $doc "warning for using patched FreeType",
	),
	/ $dev $build "merged directories for %(YBase, YFramework) platform \
		extensions"
		// Directories with pattern '$(PROJECT)_$(PLATFORM)' are now put in \
			'$(PROJECT)' with name '$PLATFORM' as subdirectories.
),

b430
(
	/= DLD "ensured all if clause and member initializer for class objects \
		initialization" ^ "preferred ISO C++11 braced initializer syntax with \
		direct-initialization" ~ "equal initializer syntax with copy \
		initialization",
		// No instance of violation found.
	/ %'YFramework' $=
	(
		/ %'Helper' $=
		(
			/ "supported extra window style" @ ("function %CreateNativeWindow"
				%'YCLib_(MinGW32)'.'Win32GUI'; "function %ShowTopLevel"
				@ %'HostedUI') @ "platform %MinGW32",
				// Defaulted as 'WS_EX_LAYERED'. Note the windows is totally \
					transparent after 'WS_EX_LAYERED' is set. Set opacity to \
					make the window visible.
			+ "units %(ScreenBuffer; HostRenderer)",
			/ %'HostedUI' $=
			(
				/ "non-inline functions %(GetHostRendererPtrOf, GetWindowPtrOf)"
					-> "inline functions",
				/ "function %MakeHostRenderer" -> "function template"
			),
			/ $dev @ "class %Window" %'HostWindow' $=
			(
				(
				$dep_from %'YCLib_(MinGW32)'.'Win32GUI';
				/ "simplified class %Host::Window" ^ "class %HostWindow"
				),
				(
				-"2nd parameter" @ "constructor";
				+ "constructor with 1 parameter"
				)
			),
			/ "object %WindowClassName" @ "namespace %Host" @ %'HostWindow'
				>> %'YCLib_(MinGW32)'.'Win32GUI';
			/ $dev "simplified header dependencies";
			/ $dev @ "namespace %Host" @ %'GUIApplication' $=
			(
				/ "all class name declarations" >> %'YGlobal',
				/ 'using namespace platform_ex;' >> %'HostWindow'
			),
		)
		/ %'YCLib_(MinGW32)'.'Win32GUI' $=
		(
			+ "member functions %(GetOpacity, SetOpacity)"
				@ "class %WindowReference",
			+ "class %HostWindow" @ "namespace %platform_ex::Windows"
		)
		/ %'YSLib'.'YAdaptor'.'Image' $=
		(
			+ "enum class %SamplingFilter",
			/ @ "class %HBitmap" $=
			(
				/ "allowed nullptr as default argument"
					@ "constructor with data pointer",
					// As "handle".
				+ "member function %swap",
				+ "unifying assignment",
				+ "converter 'explicit operator bool() const ynothrow'",
				+ 'operator!() const ynothrow',
				(
				$dep_from "%SamplingFilter";
				+ "constructor 'HBitmap(const HBitmap&, const Size&, \
					SamplingFilter)'";
				+ "member function %HBitmap::Rescale"
				)
			),
			(
			$dep_from "%HBitmap::swap";
			+ "non-member function %swap for class %HBitmap"
			)
		)
	),
	/ "resumed when one bookmark loading failed" @ %'YReader'.'text reader'
),

b429
(
	/ %'YFramework' $=
	(
		+ "class %platform_ex::DSVideoState" @ 'YCL_DS || YCL_HOSTED'
			@ %'YCLib'.'Video',
		+ "member function %WindowReference::Invalidate"
			@ %'YCLib_(MinGW32)'.'Win32GUI',
		/ %'Helper' $=
		(
			/ %'HostWindow' $=
			(
				$dep_from "%WindowReference::Invalidate";
				+ 'using WindowReference::Invalidate;' @ "class %Host::Window"
			),
			/ %'DSMain' $=
			(
				+ $dev "restricted 'YCL_DS || YCL_HOSTED'" @ "header",
				/ @ "class %DSApplication" $=
				(
					(
					$dep_from %'YCLib'.'Video';
					+ "private inheritance %platform_ex::DSVideoState";
					+ 'using DSVideoState::IsLCDMainOnTop;'
					),
					$dep_from %'HostWindow';
					+ "member function %SwapScreens"
				)
			),
			/ @ "class %ShlDS" @ %'Shell_DS' $=
			(
				(
				+ "cursor desktop pointer";
				+ "member functions %(GetCursorDesktopHandle, GetCursorDesktop)"
				),
				(
				$dep_from "class %DSApplication";
				+ "member function %SwapScreens";
				+ "function %WrapForSwapScreens"
				),
				+ "member function %SwapDesktops",
				/ "member function %GetDesktopDown" => "%GetSubDesktop",
				/ "member function %GetDesktopDownHandle"
					=> "%GetSubDesktopHandle",
				/ "member function %GetDesktopUp" => "%GetMainDesktop",
				/ "member function %GetDesktopUpHandle"
					=> "%GetMainDesktopHandle"
			)
		),
		/ %'YSLib'.'UI' $=
		(
			+ "class template %GEventGuard" @ %'YEvent';
			/ %'YControl' $=
			(
				/ "function template %NewEvent" >> %'YWidgetEvent';
				/ "function %GetEvent" >> %'YWidgetEvent';
				/ "function templates %FetchEvent except for %IWidget"
					>> %'YWidgetEvent'
			)
		)
	);
	/ %'YReader'.'file explorer' $=
	(
		+ "swap screens when key pressed down has mask specified by mask",
		+ "buttons for swapping screens on desktops"
	)
),

b428
(
	/ %'YFramework' $=
	(
		/ %'YSLib' $=
		(
			/ %'UI' $=
			(
				/ @ "class %Widget" @ %'YWidget' $=
				(
					(
					/ "explicitly defualted move constuctor"
						-> "explicitly deleted";
					/ $revert(b426) "simplified member functions \
						%(GetRenderer, View) as inline function without \
						exception",
						// For performance.
					/ "simplified member function %GetController as inline \
						function without exception"
						// Ditto.
					),
					(
					$dep_from %'YGUI';
					/ "automatically cleanup references on destruction"
					)
				)
				+ "member function %GUIState::CleanupReference" @ %'YGUI'
			),
			/ @ "class %Graphic" @ %'Core'.'YGDIBase' $=
			(
				+ "non-explicit default constructor",
				- "1st default argument"
					@ "explicit constructor with 2 parameters"
			)
		),
		/ @ "namespace %platform_ex::Windows" @ %'YCLib(MinGW32)'.'Win32GUI' $=
		(
			(
			+ "function %CreateNativeWindow",
			+ "member function %WindowReference::SetText"
			),
			(
			+ "class %(ScreenBuffer; ScreenRegionBuffer)",
			+ "class %WindowMemorySurface",
			+ "class %(WindowDeviceContextBase; WindowDeviceContext, \
				WindowRegionDeviceContext)",
			+ "class template %GSurface";
			- $comp "screen update time" @ "debug output";
			),
			/ DLD "declared reopened non-inline namespace %Windows"
				@ "namespace %platform_ex"
				// Though G++ has no diagnostic at all for reopened namespace \
					both from inline to non-inline and vice versa, but Clang++ \
					do complain both. See $ref b428.
		),
		/ %'Helper' $=
		(
			/ %'HostWindow' $=
			(
				$dep_from "%WindowReference::SetText";
				+ 'using WindowReference::SetText;' @ "class %Host::Window"
			),
			/ @ "namespace %Host" @ %'HosteUI' $=
			(
				(
				/ DLD "window thread implementation"
					^ 'std::atomic<Window*>' ~ 'unique_ptr<Window>';
					// Convenient for safe concurrent state checking. The \
						ownership semantics still kept.
				+ "function %WaitForHostWindow"
				),
				(
				+ "function %ShowTopLevel" @ "platform %MinGW32";
				+ "function %ShowTopLevelDraggable"
				)
			)
		),
		/ "made explicit no exception specification"
			@ "user-defined destructors" @ "all final classes" @ %'YFramework'
			$= (+ 'ynothrow' @ ("classes %(ImageMemory, HBitmap, ImageCodec)"
				@ %'Image', "classes %(Typeface, FontCache)" @ %'Font')
				@ %'YSLib'.'Adaptor'));
			// Class at %YBase like %any should conform ISO C++ standard \
				library tradition, which add no explicit exception \
				specification.
	),
	* "missing 2nd template parameter" @ "relation functions for class \
		template %ystdex::bitseg_iterator" @ %'YBase'.'Iterator' $since b414,
	/ $dev "all subsequent tokens" @ "preprocessing directive '#error'"
		-> "string literal"
),

b427
(
	/ %'YFramework' $=
	(
		/ %'Helper' $=
		(
			/ @ "class %Window" @ %'HostWindow' $=
			(
				* "missing checking failure" @ "member function \
					%Window::GetInputBounds" @ "platform %MinGW32" $since b388
				+ $dev 'using namespace platform_ex' @ "namespace %Host"
					@ "platform %MinGW32" @ %'HostWindow',
				(
				$dep_from %'YCLib_(MinGW32)'.'Win32GUI';
				/ DLD "simplified implementation" @ "class %Host::Window"
					^ "private inheritance %Windows::WindowReference"
				),
				(
				+ 'std::atomic<bool> BoundsLimited{false};'
					@ "class %Host::Window"
					// DS window defaulted as 'true'.
				$dep_to "window cursor boundary"
				)
			),
			/ @ "member function %InputManager::Update" @ "platform %MinGW32"
				@ %'InputManager' $=
			(
				$dep_from %'YCLib_(MinGW32)'.'Win32GUI';
				* "missing checking input boundary validity"
					@ "member function %InputManager::Update" $since b388,
					// Win32 API call can faile, though it's rare.
				(
				$dep_from "window cursor boundary";
				+ "free cursor boundary support"
				// Now dragging hosted window would not be interrupted by \
					moving the cursor out of the boundary unless \
					%Window::BoundsLimited is set.
				)
			),
			/ @ "namespace %YSLib::Host" @ %'YGlobal' $=
			(
				/ "class %Exception" >> ("namespace %platform_ex"
					@ %'YCLib_(MinGW32)'.'MinGW32')
				+ 'using platform_ex::Exception'
			),
			/ $dev 'using namespace platform_ex' @ "platform namespaces"
				@ %'DSMain' >> ("corresponding namespace" %'YGlobal'),
			/ $dev @ "platform %MinGW" @ %'GUIApplication' $=
			(
				$dep_from %'YCLib_(MinGW32)'.'Win32GUI');
				/ "class %Win32Exception, macro %YF_Raise_Win32Exception"
					>> %'YCLib_(MinGW32)'.'MinGW32',
				/ 'typedef ::HWND NativeWindowHandle' @ "namespace %Host"
					>> ("namespace %platform_ex"
					@ %'YCLib_(MinGW32)'.'Win32GUI')
			)
		)
		+ "constructor 'Screen(const Size&, Drawing::BitmapPtr = {}) ynothrow'"
			@ %'YSLib'.'Core'.'YDevice',
		/ %'YCLib_(MinGW32)' $=
		(
			+ $dev "unit %'Win32GUI' with files %(Win32GUI.h, Win32GUI.cpp)";
			/ %'MinGW32GUI' $=
			(
				+ "inline namespace %Windows" @ "namespace %platform_ex";
				+ "class %WindowReference" @ "namespace %platform_ex::Windows"
			)
		)
	)
	+ $dev "empty VC++ projects %YFramework_MinGW32",
		// Only for convenience, no ability for building.
	/ $doc @ "directory %doc" $=
	(
		+ "%Documentation::YBase(file %YBase.txt)"
		+ "%Documentation::YFramework(file %YFramework.txt)"
	)
),

b426
(
	/ DLB "VC++ projects" $=
	(
		- "all filters of extensions",
		/ "reconstructed files as directories"
	),
	/ %'YFramework' $=
	(
		- "pure color filling method %Update" @ "class %DSScreen",
		/ %'UI' $=
		(
			/ $dev @ %'YComponent' $=
			(
				/ "header %ycomp.h" => "%YComponent.h",
				+ "implementation unit %YComponent.cpp"
			),
			/ "inline 'ynothrow' member functions %(GetRenderer, GetView)"
				@ "class %Widget" @ %'YWidget' -> "non-inline member functions \
				without exception specifications";
				// It should be note that the internal pointer could be null \
					so the state is invalid after being moved, thus exceptions \
					should be thrown.
		),
		/ %'Helper' $=
		(
			/ "all 3 %Drawing::to_string" @ %'ShellHelper'>> %'UI'.'YComponent';
			/ DLD "host implementation reconstructed";
			(
			+ "class %Host::Exception" @ "defined %YCL_HOSTED" @ %'YGlobal';
			+ "class %MinGW32::Win32Exception; macro %YF_Raise_Win32Exception"
				@ "platform %MinGW32" @ %'GUIApplication';
			/ @ %'HostWindow' $=
			(
				/ @ "class %Host::Window" $=
				(
					/ "returning type of member function %Show" -> "'bool'"
						~ "'void' to report asynchronous result",
					+ "member function %(Move, GetLocation)"
						@ "class %Host::Window"
				);
				/ "all Win32 API call failures not producing as result \
					wrapped by %MinGW::Win32Exception" @ "platform %MinGW32"
			);
			+ "function %Host::DragWindow" @ %'HostedUI'
				// Currently only supported when cursor over the host window.
			),
			* "command line initialization state missing" @ "platform %DS"
				@ %'GUIApplication' @ $since b425
				// Font cache was not initialized as soon before GUI mode
					screen initialization, so the output messages were missing.
		)
		/ DLD "unified preprocessing error message for alerting unsupported \
			platform",
	)
),

b425
(
	/ %'YFramework' $=
	(
		/ %'YSLib' $=
		(
			/ %'UI' $=
			(
				/ "typedef %HWheelEvent" @ %'YWidgetEvent'
					=> "%HCursorWheelEvent",
				+ "forwarding %CursorWheel to vertical scroll bar"
					@ "class %ScrollableContainer" @ %'Scroll';
			),
			/ %'Adaptor'.'Font' $=
			(
				- "exception specifications" @ "functions \
					%(FontCache::GetDefaultTypefacePtr, FetchDefaultTypeface)",
				/ @ "destructor" @ "class %Typeface" $=
				(
					+ "assertions for internal face pointer and face object \
						state";
					* "faces metrics tables leaked on font cache exit"
						$since b420
				)
			)
		),
		/ %'Helper' $=
		(
			- $dev "host double %CS_DBLCLKS support" @ "host windows"
				@ "platform %MinGW32",
			(
			/ "inline function %FetchDefaultFontCache"
				@ "header %GUIApplication.h" -> "non-inline function"
				@ %'Initialization',
			/ %'Initialization' $=
			(
				+ "function %FetchRoot",
				+ "registered object destructors as stacked callbacks"
					@ "function %Unitialize"
					// For debug allocation compatibility;
			);
			- "members %(ValueNode, GetFontCache; pFontCache)"
				@ "class %GUIApplication" @ %'GUIApplication'
			)
			* "uninitialized access" @ "window procedure" @ "platform %MinGW32"
				$since b423
		)
	),
	/ %'YBase' $=
	(
		+ "macro %(YB_HAS_THREAD_LOCAL; ythread)" @ %'YDefinition',
		/ @ "class template %nifty_counter" @ %'YStandardEx'.'Utilities' $=
		(
			(
			- "typedef %count_type";
			- "template parameter 'typename _tCount = size_t'",
			),
			(
			$dep_from %'YDefinition';
			/ "implementation" ^ "%ythread"
			),
			+ 'ynoexcept' @ "all non-template member functions"
		)
	)
),

b424
(
	/ %'YFramework' $=
	(
		/ @ "platform %MinGW32" @ %'Helper' $=
		(
			* "cursor across host window boundary" $= $since b388,
			* "wrong location of initializing raw input" $since b423
				// The initialization should be at initialization of host \
					window, but not the shell input manager.
			(
			* "missing triggling %KeyUp" $since b422
			$dep_to "triggling %KeyUp"
			)
		),
		* "corrupted wrong screen output" @ "platform %DS" $since b405
			$= (/ $revert(b405) "flush cache" @ "function %ScreenSynchronize"
				@ %'YCLib'.'Video'),
		/ %'YSLib'.'UI' $=
		(
			/ %'YControl' $=
			(
				// Now event %(Enter, Leave) can be automatically synthesized.
				/ "function %OnKey_Bound_TouchUpAndLeave"
					-> "%OnKey_Bound_TouchUp",
				/ "function %OnKey_Bound_EnterAndTouchDown"
					-> "%OnKey_Bound_TouchDown"
			),
			/ @ "class %GUIState" @ %'YGUI' $=
			(
				(
				/ $revert(b421) "member function %GUIState::ResponseKey \
					allowed routed events,
				/ "events %(TouchUp, TouchDown) handled by wrapped handlers";
					// So manually sent touch events can be handled with GUI \
						state changes, and no need to bind %OnKey_Bound_Click.
				* $comp "bound missing automatically triggling control \
					%(Leave, Click) events" $since b421;
				$dep_from "triggling %Leave";
				),
				/ "events %(KeyUp, KeyDown) handled by wrapped handlers",
					// So manually sent key events can be handled with GUI \
						state changes.
				/ "all returning value of member function %'Response*' \
					discarded"
			),
			(
			$dep_from "triggling %KeyUp",
			$dep_from "triggling %Leave";
			* $comp "missing responding forwarding tunnel key accerators"
				$since b421
			)
		)
	)
),

b423
(
	/ DLD "all '= false'" -> "'= {}' for well-formed use of pointer types as \
		left operands",
	* $design "platform-dependent bool type xor operation" @ "function \
		%openmode_conv#2" @ %'YBase'.'YStandardEx'.'CStandardIO' $since b326,
	/ %'YFramework' $=
	(
		/ %'YSLib'.'UI' $=
		(
			/ %'YWidgetEvent' $=
			(
				+ "event enumerator %CursorWheel" @ "%VisualEvent",
				(
				+ "typedef %WheelDelta";
				+ "class %CursorWheelEventArgs";
				+ "typedef %HWheelEvent"
				),
				+ "virtual destructor" @ "class %UIEventArgs"
			);
			/ @ "class %GUIState" @ %'YGUI' $=
			(
				+ "member funtcion %ResponseCursorIndirect";
				/ "member funtcion %ResponseTouchBase" -> "%ResponseCursorBase";
				/ "member funtcion %ResponseTouch" -> "%ResponseCursor"
			);
			+ "%CursorWheel support for class %AScrollBar" @ %'Scroll'
		),
		/ %'Helper' @ "platform %MinGW32" $=
		(
			+ "raw input support for mouse wheel";
			+ "wheel input forwarding" @ "class %InputManager"
		)
	)
),

b422
(
	/ %'YFramework' $=
	(
		/ %'YSLib'.'UI' $=
		(
			/ %'YWidgetEvent' $=
			(
				/ "event enumerator %CursorMove" => "%CursorOver",
				/ "typedef %TouchEvent" => "%CursorEvent",
				/ "class %TouchEventArgs" => "%CursorEventArgs",
				/ "class %HTouchEvent" => "%HCursorEvent"
			),
			/ %'YGUI' $=
			(
				$dep_from %'Helper'.'InputManager';
				+ "responsing event %CursorOver",
				+ "independent cursor focus pointer";
				+ "support for %(Enter, Leave) generated by %CursorOver",
				/ "member function %IsControlEntered" => "%IsEntered",
				+ "member function %(GetCursorOverPtr, Wrap)",
			),
			/ "%(Enter, Leave) now only generated for derived classes of \
				%Control as default"
		),
		+ "forwarding %CursorOver through %TouchUp with empty key set"
			@ "platform %MinGW32" @ %'Helper'.'InputManager'
	)
),

b421
(
	+ "function templates %(hash_combine; 3 hash_combine_seq, 2 hash_range)"
		@ %'YBase'.'YStandardEx'.'Functional',
	/ %'YFramework' $=
	(
		/ %'YSLib' $=
		(
			/ %'Adaptor'.'Font' $=
			(
				$dep_from %'YBase'.'YStandardEx'.'Functional';
				+ "style hashing" @ "glyph bitmap cacheing",
				/ "member function %Font::SetStyle to allow non-regular style \
					setting when typeface exists";
				+ "support for bold and italic bitmap glyphs"
					// But no support of typefaces for specific styles \
						currently.
			),
			/ %'UI' $=
			(
				/ "all event handlers of %TouchMove" -> "TouchHeld",
				/ %'YControl' $=
				(
					- "function %OnTouchMove",
					/ "function %OnTouchMove_Dragging"
						=> "%OnTouchHeld_Dragging"
				);
				/ "enumeration %VisualEvent" @ %'YWidgetEvent' $=
				(
					- "enumerator %TouchMove",
					+ "enumerator %CursorMove"
						// No effect currently.
				);
				/ @ "class %GUIState" @ %'YGUI' $=
				(
					/ "side effects of responsing %(TouchUp, KeyUp)" $=
					(
						/ "independent focus pointer now unconditionally reset",
						/ "(held state, dragging offset) now maintained"
					),
					/ "member function %GUIState::ResponseKey now only allowed \
						event called without other side effects (i.e. access \
						independent focus event and trying KeyPress when \
						possible) for indirect routing stratagy
				)
			)
		),
		/ $dev %'YBaseMacro' $=
		(
			+ DLD "including header %ydef.h",
			+ "macro %DefBitmaskEnumOperations"
		),
		* "wrongly dragged widgets after released dragging and moved cursor \
			out of boundary of host window touch event responding area"
			@ "platform %MinGW32" $since b388
	)
),

b420
(
	/ %'YFramework'.'Adaptor'.'Font' $=
	(
		/ "small bitmap cacheing using moving" ~ "copying",
		/ @ "class %Typeface" $=
		(
			/ DLD "assured non-null face",
			* "missing destructor" $since b419,
			+ "size cacheing"
		),
		/ @ "class %NativeFontSize" $=
		(
			+ $dev "private inheritance %noncopyable",
			/ $dev "constructor accept reference" ~ "pointer",
			+ "member function %Activate",
			- "redundant check"
		),
		* "destructor" @ "class %FontCache wrongly release library before \
			cleaning container" $since b419
			// It's OK for cached objects because no destructor would perform \
				multiple release when cache manager is cleared before the \
				library instance. But it's wrong without FreeType cache \
				manager and will cause multiple release of resources. Since \
				the destructor is missing, this problem is not explicit @ \
				b419, but resource leaks.
	),
	/ DLP "updated library freetype" @ "library using" $=
	(
		- "module configuration ('HINTING_MODULES += autofit',
			'AUX_MODULES += cache', 'BASE_EXTENSIONS += ftfstype.c',
			'BASE_EXTENSIONS += ftstroke.c', 'BASE_EXTENSIONS += ftsynth.c');
		^ "updated freetype 2.5.0.1 with several files remained"
			~ "freetype 2.4.11"
			// See [Documentation::Designation @@5.4.1.3] .
	)
),

b419
(
	/ %'YFramework' $=
	(
		/ %'Adaptor'.'Font' $=
		(
			+ "class %(FontException, NativeFontSize, SmallBitmapData)";
			/ @ "class %Typeface" $=
			(
				* "missing glyph index cache insertion failure check"
					$since b418,
				+ "2 member functions %GetTypefaceRef",
				(
				+ "glyph bitmap cache";
				+ "member function %ClearBitmapCache"
				)
			);
			- @ "class %FontCache" $=
			(
				- "size cache";
				- "FreeType cache manager";
				- "member function %(ResetGlyphCache, Reset)"
			),
			/ @ "class %Font" $=
			(
				/ "simplified data member",
				+ $dev $workaround "special member functions"
					// For G++ 4.7.1 there are several errors about implicitly \
						declared special member functions in derived class.
			),
		)
		/ $dev "access control" @ "inheriting class %LoggedEvent"
			@ "class %BadEvent" @ %'UI'.'YWidgetEvent' -> 'public' ~ 'private',
		* $design "platform-dependent bool type xor operation" @ "assertion"
			@ "member function %(CompactPixmap, CompactPixmapEx)::SetSize, \
			CompactPixmapEx::SetSize" $since b176
			@ %'(BitmapBuffer, BitmapBufferEx)::SetSize'
	),
	/ DLD "all '= nullptr'" -> "'= {}' for well-formed use of pointer types as \
		left operands"
),

b418
(
	/ DLD "header %ft2build.h" @ "directory %YFramework/include"
		>> "directory %3rdparty/include",
	/ %'YFramework'.'YSLib' $=
	(
		/ %'Service'.'YGDI' $=
		(
			/ "class %BitmapBuffer" => "%CompactPixmap",
			/ "class BitmapBufferEx => "%CompactPixmapEx"
		),
		/ %'Adaptor' $=
		(
			/ "class NativePixmap" @ %'Image' => "%HBitmap",
			/ %'Font' $=
			(
				/ @ "class %FontCache" $=
				(
					^ "%unordered_map with %unique_ptr for %FontFamily \
						stored",
					/ "member function %ClearCache" => "%Reset",
					- "FreeType CMap cacheing"
						// Binary size enlarged. No performance impact.
				),
				+ "CMap cacheing" ^ "%unordered_map"
			)
		)
	)
),

b417
(
	+ "typedef octet" @ %'YBase'.'YDefinition',
	(
	+ "3rdparty library FreeImage";
	$dep_to "FreeImage"
	),
	/ %'YFramework' $=
	(
		/ $dev %'YCLib'.'Video' $=
		(
			/ "typedef Color::(MonoType, AlphaType)"
				-> "namespace scope typedef names" @ "namespace %platform",
			/ "macro %YCL_PIXEL_FORMAT_AXYZ1555" -> "%YCL_PIXEL_FORMAT_XYZ555"
				@ "platform %DS",
			+ "macro %YCL_PIXEL_FORMAT_XYZ888" @ "platform %MinGW32"
		),
		/ %'YSLib' $=
		(
			/ %'Adaptor' $=
			(
				(
				$dep_from %'YBase'.'YDefinition';
				+ "using %ystdex::(byte, octet)" @ %'YAdaptor';
				),
				$dep_from "FreeImage";
				+ "unit %Image"
			),
			/ %'Service' $=
			(
				+ "constructor 'BitmapBuffer(unique_ptr<PixelType[]>, \
					const Size&) ynothrow'",
				* "wrong source offset"
					@ "member function %ImageBrush::operator()" $since b294
			)
		),
		(
		$dep_from "FreeImage"
		/ $dev $build "FreeImage supported" @ "ARM9 Makefile"
			@ "platform %DS"
		)
	)
	* "library %YFramework" @ "configuration %release_DLL" @ "platform %MinGW32"
		"wrongly linked to 'YBase.dll' of configuration %debug" $since b362,
),

b416
(
	/ $dev %'YFramework'.'YSLib' $=
	(
		+ 'final' @ "all classes" @ %'Adaptor'.'Font',
		(
			/ "class %Timer" @ %'Service'.'Timer' $=
			(
				* "redundant member function declaration %Timer::RefreshAll"
					$since b405,
				+ "member function %Test",
				+ "virtual destructor"
			);
			/ @ "class %InputTimer" %'UI'.'GUI' $=
			(
				(
				- "member functions %(Delay, Reset)",
				/ "member function %Reset" => "%ResetInput";
				/ "publicly inherited class %Timers::Timer"
				),
				+ "member function %RefreshClick"
			)
		)
	),
	/ $dev "all typedef of unnamed enums" @ "C++ code"
		-> "non-typedef named enums",
	/ %'YReader' $=
	(
		/ %'text reader' $=
		(
			+ "double click to start auto scroll when not started already",
				// Intended to not limit the positions between clicks.
			(
			/ "saved reader box state on entering session and restored on \
				exit" @ base session;
			* $comp "reader box could overlap with text after returning \
				reading UI from other UI entered through context menu"
				$since b390
				// Currently "other UI" is setting or bookmark UI.
			)
		),
		- "background switch preview" @ %'shell test example',
		/ %'file explorer' $=
		(
			* "missing menu button binding" $since b360,
				// No effect when key pressed as button text indicated.
			/ "setting panel layout",
			/ "hexadecimal check box moved into setting panel",
			/ "file box layout",
			/ "about form position"
		)
	)
),

b415
(
	/ %'YBase'.'YStandardEx'.'Iterator' $=
	(
		/ @ \clt pointer_iterator $=
		(
			+ "non-null assertions" @ "several member functions",
			- 'const' @ "member functions postfix %operator(++, --),
			/ $dev "private member 'mutable pointer current'" -> 'pointer raw'
		),
		/ @ "class template %bitseg_iterator" $=
		(
			* "'yconstfn' and assertions for strict ISO C++11 compatibility"
				@ $since b414,
				// G++ didn't complain, but Clang++ does.
			- 'const' @ "member functions postfix %operator(++, --)
		),
		/ "implemented member functions %operator(+, -) supporting underlying \
			functions which don't returning types constrctible for \
			%pair_iterator" @ "class template %pair_iterator",
		/ @ "class template %transformed_iterator" $=
		(
			* "wrong overloaded member leading to copy constructor cannot
				be called for non-const reference type" $since b288,
			+ "explicitly defaulted copy constructor",
			+ "explicitly defaulted move constructor",
				// G++ 4.7.1 can't accept this overloading, so ignored as \
					workaround.
			+ "member functions %operator(+=, -=; +, -)"
				// Using %std::advance.
		)
	),
	/ %'YFramework'.'YSLib' $=
	(
		/ @ "class %CharBitmap" @ %'Adaptor'.'Font' $=
		(
			+ "typedef %PictchType; member function %GetPitch",
			+ "typedef %FormatType; member function %GetFormat"
		);
		/ %'Service' $=
		(
			(
			$dep_from %'YBase'.'YStandardEx'.'Iterator';
			/ "text rendering supporting negative pitch and non 255 gray level \
				bitmaps";
			* $comp "wrong dispatch of char format" $since b414,
			* $comp "bitmap rendering corrupting for font with non 255 \
				gray level embedded bitmaps" $since b185
			)
			/ $dev "all '%u8' for alpha value" -> ('Color::AlphaType'
				| "template parameter %_tAlpha") @ %'YBlit'
		)
	),
	/ %'YReader' $=
	(
		- "3 bitmaps" @ "shells background images";
		* $workaround "memory allocation failed exiting reader"
			@ "debug configuration" @ "platform %DS" $since b399
			// Still possible out-of-memory if the font file is too big.
	)
),

b414
(
	/ %'YBase'.'YStandardEx' $=
	(
		/ "implemented %stable_range_unique ADL with %std::swap" @ %'Algorithm',
		+ "2 function templates %sort_unique" @ %'Container',
		/ %'String' $=
		(
			(
			$dep_from %'Container',
			+ "function template %alph"
			),
			+ "function template %concat"
		),
		+ "class template %bitseg_iterator @ %'Iterator'
			// Currently only mutable underlying byte pointer is supported.
	),
	/ %'YFramework'.'YSLib' $=
	(
		/ %'Core' $=
		(
			(
			$dep_from %'YBase'.'YStandardEx'.'String';
			/ "implementation" @ "member function %String::operator="
				@ %'String'
				// More efficient.
			),
			/ "class %FileList" -> "function %ListFiles" @ %'YFileSystem'
		),
		(
		$dep_from %'Core'.'YFileSystem';
		/ "simplified inheritance and members" @ "class %FileBox" @ %'UI'
			// More space efficient.
		),
		/ %'Adaptors'.'Font' $=
		(
			/ "member function %Font::Getstyle" => "GetStyle";
			+ "member function %CharBitmap::GetGrayLevel"
		),
		/ %'Service' $=
		(
			/ "function template specializations %BlitScale implemented as \
				inline functions",
				// For more compact binary files.
			(
			$dep_from %'YBase'.'YStandardEx'.'Iterator';
			/ $dev "blitAlphaBlend supported for %bitseg_iterator as source";
			$dep_to "%blitAlphaBlend"
			),
			(
			$dep_from "%blitAlphaBlend";
			/ "character renderer interface supported for bitmap source other \
				than 255 gray level"
			)
		)
	)
),

b413
(
	/ %'YFramework' $=
	(
		/ %'YCLib' $=
		(
			+ 'ynothrow' @ ("constructor %FileOperationFailure"
				@ %'YFileSystem',"member funtions %CursorInfo::(GetX, GetY)"
				@ %'Input', "member function %MappedFile::GetPtr"
				@ %'MemoryMapping', "2 functions %IsDirectory"
				@ "platform %MinGW32" @ %'NativeAPI', "all namespace scope \
				functions %'Fecth*'" @ %'Video')
			+ 'const' @ "member function %DirectorySession::GetNativeHandle"
				@ %'FileSystem',
			$dev
			(
			$dep_form %'YBaseMacro';
			^ %'YBaseMacro' @ %'YCLib'
			)
		),
		/ "saved initialization result to allow multiple initlization"
			@ "class %COM" %'YCLib_(MinGW32)'.'COM',
		/ $dev %'YBaseMacro' $=
		(
			/ "header %YBaseMacro[%ybasemac.h]" @ 'YSLib'.'Core'
				-> 'YBaseMacro'["YBaseMacro.h" @ "directory %YFramework"];
			/ "macro %ImplRet now allowed brace-init-list returned",
			/ "merged macro %DefEmptyDtor" -> %'DefDeDtor'
				// As of G++ 4.7.1 bug, using workaround as %DefEmptyDtor, \
					otherwise explicit defaulted function.
		),
		/ %'YSLib' $=
		(
			/ %'Core' $=
			(
				/ $dev %'YEvent' $=
				(
					/ @ "class templates %(GHEvent; GEvent; GDependencyEvent)"
						$=
					(
						/ "supported non-void returning type",
						- "typedef name %EventArgsType"
					),
					+ "typedef name %TupleType" @ "class template %GEvent",
					+ "template class %EventArgsTypeHead"
				),
				+ "member function String& operator*=(size_t)" @ "class %String"
					@ %'YString'
			),
			/ %'UI' $=
			(
				$dep_from %'Core'.'YEvent';
				- "function template %DoEvent#2"
			)
		)
	)
),

b412
(
	/ %'YBase' $=
	(
		/ "disabled macro %YB_USE_EXCEPTION_SPECIFICATION unconditionally \
			by default" @ %'YDefinition',
		/ %'YStandardEx' $=
		(
			- "typedef names %(const_path_t, path_t)" @ %'CStandardIO',
			(
			+ %'Variadic';
			/ "variadic meta types" @ %'TypeOperations' >> %'Variadic'
			),
			+ "struct %variadic_param; function template %varg" @ %'Functional',
			/ %'Iterator' $=
			(
				/ @ "class template %transformed_iterator" $=
				(
					/ "transformer interface",
						// Now producing value instead of iterator. Note it is \
							still distinct with boost.iterator, whose \
							%transform_iterator excepts a value but not \
							iterator as input.
					+ "2 member function %get_transformer"
				),
				+ "class template %indirect_input_iterator";
			)
		)
	),
	/ %'YFramework' $=
	(
		/ %'YCLib'.'FileSystem' $=
		(
			/ @ "class %HDirectory" $=
			(
				+ "member function %GetName";
				/ "%operator* now returning self reference to adapt to \
					%indirect_input_iterator"
			),
			$dep_from %'Iterator';
			/ "class %FileIterator" -> "typedef name of instantiated template \
				%indirect_input_iterator",
			/ $dev $lib "simplified header inclusion as \
				%Documentation::ProjectRules"
		),
		+ %'YCLib_(MinGW32)' $=
		(
			+ "common header file";
			+ "COM abstraction header file"
		),
		/ %'YSLib' $=
		(
			// All bugs below in this revision are checked by Clang++ 3.4 \
				(trunk183609) diagnostics, which all accepted by G++ 4.8.1 \
				silencely.
			/ %'Core' $=
			(
				* $dev "strictly use of constexpr conforming to ISO C++11 for \
					static data object %Invalid"
					@ "class template %GBinaryObject" @ %'GDIBase' $since b311
					// Resolved $known_issue_b351_1. Though C++1y may loose \
						the restrictions as allowing this invalid C++11 \
						construct. Note another restriction is already relaxed \
						in the draft WG21/N3691. See $ref b412 $note "N3652".
				* $dev "wrong 'yconstfn'" @ "constructor %Message" @ %'YMessage'
					$since b368,
					// Though G++ accepts invalid code, it is conforming \
						because "no diagnostics required" is explicitly stated \
						by ISO C++11.
				/ $dev %'YFileSystem' $=
				(
					+ "specified %u32 as underlying type"
						@ "enum classes %(PathCategory, NodeCategory)";
					* missing explicit cast when initializating members with \
						enum class enumerators" @ "enum class %NodeCategory"
						$since b410
				),
				* "wrong overloaded member leading to copy constructor cannot
					be called for non-const reference type" $since b207
					// This also resolves the Clang++ bug, for private member \
						with SFINAE is not enough. See $ref b412 $note \
						"Clang++ bug 8448".
			)
			* $dev "invalid incompelete type %Renderer used"
				@ "construct template %Widget" @ %'UI'.'YWidget' $since b293
		)
	)
	+ DLD "'const' for 'yconstfn' functions and function templates to \
		eliminate Clang++ [-Wno-constexpr-not-const]"
),

b411
(
	/ $dev $build @ "platform %MinGW32" $=
	(
		^ DLP "MinGW[gcc version 4.8.1 (Built by MinGW-builds project)] \
			x32-4.8.1-release-posix-sjlj-rev0" ~ "MinGW[gcc version 4.8.0 \
			(Built by MinGW-builds project)] x32-4.8.0-release-posix-sjlj-rev0 \
			[release-sjlj]" @ "platform %MinGW32",
				// Unchanged: Target=i686-w64-mingw32, Thread model: posix, \
					Exceptions implementation: SjLj.
		/ $dev $build "compiler flag" "'-Og'" -> '-O' @ "debug configurations"
			// $revert(b392) Code::Blocks can't debugging with '-Og' well.
	),
	/ %'YFramework' $=
	(
		/ %'YCLib'.'FileSystem' $=
		(
			- "(functions, function templates) %(udirexists, direxists)",
			/ "class %HFileNode" -> "classes %(FileOperationFailure, \
				DirectorySession, HDirectory, FileIterator)"
		)
		/ %'YSLib' $=
		(
			/ %'UI' $=
			(
				* $dev $doc "exception name" @ %'UI'.'YControl' $since b241,
				/ "empty struct %BadEvent"
					-> "class %BadEvent : public LoggedEvent" @ %'YWidgetEvent'
			),
			/ $dev %'Adaptor'.'YAdaptor' $=
			(
				$dep_from %'YCLib'.'FileSystem';
				+ "using %platform::(FileOperationFailure, DirectorySession, \
					HDirectory, FileIterator)" @ "namespace %IO"
			);
			/ @ "namespace %IO" @ %'Core'.'YFileSystem' $=
			(
				/ @ \cl Path $=
				(
					/ "member function %GetNativeString" -> "%GetMBCS";
					+ "conversion function operator %string"
				);
				- "typedef name %NativeString",
				+ "typedef name %PathNorm",
				/ @ "class %FileList" $=
				(
					/ "supported empty path as '.'",
					/ "discarded returning type" @ "member function %ListItems"
						// Now no counting and reserving list items, and the \
							original would be kept on exception thrown.
				),
				- "all namespace scope yconstexpr constants %(FS_Now, \
					FS_Parent, FS_Separator, FS_Root)",
			)
		)
	)
),

b410
(
	* "wrong implementation" @ "member functions %(filter_self, merge_parents)
		@ "class template %path" @ %'YBase'.'YStandardEx'.'Path' $since b409;
	/ %'YFramework' $=
	(
		* "wrong implementation" @ "macro %YCL_FS_StringIsParent"
			@ %'YCLib'.'FileSystem' $since b409,
		/ %'YSLib'.'Core'.'YFileSystem' $=
		(
			/ @ "class %Path" $=
			(
				+ "using %ypath::(get_norm, filter_self, merge_parents)",
				- "member functions %(GetExtension, IsDirectory, IsAbsolute, \
					IsRelative)",
				+ "member functions %(GetString, Normalize)"
				* "wrong implementation for empty or absolute paths"
					@ "member function %operator/=" $since b409;
				+ "member %operator/= for %String as directly subdirectory \
					access"
			),
			+ "functions %(GetExtensionOf, 4 VerifyDirectory, 3 IsAbsolute, \
				4 IsRelative),
				// Another overloaded %IsAbsolute is from namespace %platform;
			- "functions 2 %ValidatePath";
				// %VerifyDirectory should be used instead.
			+ "member %operator/= for %String as directly subdirectory access"
				@ "class %FileList",
			+ "path and file system node classifying APIs" $=
			(
				+ "enum classes %(PathCategory, NodeCategory)";
				+ "functions %(ClassifyPath, ClassifyNode)
			)
		)
	),
	/ %'YReader' $=
	(
		/ %'file explorer' $=
		(
			* "non lower-case extensions wrongly ignored" $since b389,
			(
				$dep_from %'YFramework';
				* $comp "non-normalized paths shown" $since b409;
				$dep_to "explorer path"
			)
		),
		/ %'text reader' $=
		(
			$dep_from "explorer path";
			* $comp "non-normalized path wrote into configuration" $since b409
				// This may cause corrupted configuration and crash on loading.
		)
	)
),

b409
(
	/ %'YFramework' $=
	(
		/ $dev "all %Swap" => 'swap',
		/ $dev "all %Clone" => 'clone',
		/ %'YSLib' $=
		(
			/ %'Core' $=
			(
				/ $dev %'YBaseMacro' $=
				(
					/ "macro %DefClone(_q, _t, n)" -> "%DefClone(_q, _t)",
						// Thus all member function name 'Clone' unified as \
							'clone'.
					+ "macro %DefSwap",
					/ "macro %yJOIN" >> 'YBase'.'YDefinition'
				),
				/ @ %'YEvent' $=
				(
					+ "non-member function template %swap for specification of \
						%GEvent",
					* $dev "missing excluding of 'GEvent&'"
						@ "constructor template with 1 function parameter"
						@ "class template %GEvent" $since b293
				),
				+ "non-member function %swap for classes \
					%(Message @ %'YMessage', ValueObject" @ %'YObject'),
				/ %'YFileSystem' $=
				(
					$dep_from %'YCLib'.'FileSystem'
					+ $dev "template specification \
						%ystdex::file_path_norm<YSLib::String>",
					+ $dev "typedef name %ypath";
					/ @ "class %Path" $=
					(
						- "all static member object %(Slash, Now, Parent)",
						/ $dev "implementation" ^ "inheritance %ypath"
							~ "string member",
						- "member functions %('Has*', 'GetRoot*',
							GetRelativePath, GetParentPath, GetFilename,
							GetStem, MakeAbsolute, RemoveFilename,
							ReplaceExtension, NormalizeTrailingSlash),
						+ "iterator typedef names" -> "using
							%ybase::(iterator, const_iterator)",
						+ "typedef %StringType' -> "%value_type",
						/ "2 conversion functions for string referendce"
							-> "conversion function for %String"
						+ "using %ypath::(back, front, begin, end, cbegin, cend,
							iterator, const_iterator, value_type, insert, erase,
							is_absolute, is_relative, empty, clear, size)",
						+ "declarations for friend operator %(==, <) using \
							bases but not native strings"
					)
					- "functions %(GetDirectoryNameOf, 2 ChangeDirectory)"
				)
			),
			+ "non-member function template %swap for class %(BitmapBuffer, \
				BitmapBufferEx)" @ %'Service'.'YGDI'
		),
		/ $dev %'YCLib'.'FileSystem' $=
		(
			$dep_from %'YBase'.'YDefinition';
			+ "function bool platform_ex::FS_IsRoot(const ucs2_t*)"
				@ "platform %DS",
			+ "macro %(YCL_FS_StringIsCurrent, YCL_FS_StringIsParent,
					YCL_FS_CharIsDelimiter, YCL_FS_StringIsRoot)"
		)
	),
	/ $dev %'YBase' $=
	(
		/ %'YStadardEx' $=
		(
			/ "tempalte specification %path<std::string>"
				@ %'YStandardEx'.'Path' -> "partial specification \
				%path<std::basic_string<_tChar, _tAlloc>>",
			/ %'String' $=
			(
				/ "typedef name %string_traits::value_type to adapt to \
					non-class C-style string types",
				+ "2 function templates %string_length"
			)
		),
		+ "macro %yjoin" @ %'YDefinition'
	)
),

b408
(
	/ %'YBase' $=
	(
		* "implementation" @ '#define ynothrow' @ "!defined 'YB_HAS_NOEXCEPT'
			@ 'YDefinition' $since b319,
		/ DLD "all 'std::enable_if' excluding 'using std::enable_if'"
			-> 'enable_if' @ "namespace %ystdex" @ %'YStandardEx',
		/ $lib %'TypeOperation' $=
		(
			* "macro %YB_TYPE_OP_TEST_2" $since b399;
			* $comp "broken %(details::have_equality_operator,
				ystdex::has_equality_operator)" $since b399
		),
		+ $dev $doc "member grouping Doxygen comments for some random access \
			iterator templates" %'Iterator',
		(
		+ "class templates %(container_adaptor; sequence_container_adaptor)"
			 @ %'Container';
		+ %'Path' $=
		(
			+ "class template %path";
			+ "free function templates for %path"
		)
		),
		/ %'String' $=
		(
			/ "all 2 function tmplates %split" => "%split_l";
				// Marked as "left" because left delimiter is reserved.
			+ "2 function templates %split"
				// New return type is void instead of iterator type.
		),
		/ DLD "normalized template parameters as convention: %(_fPred, _tCont, \
			_tSeqCont)"
	)
),

b407
(
	/ %'YFramework'.'YSLib' $=
	(
		/ $dev @ %'Service'.'YGDI' $=
		(
			/ "interface %IImage" >> 'Core'.'YGDIBase',
			/ "all 'u8'" -> 'PixelType::AlphaType' @ %YGDI
		),
		+ $dev "virtual member function %GraphicDevice::GetBackBuffer"
			@ %'Core'.'YDevice',
		/ %'UI' $=
		(
			/ "constructor" @ "%Window" ^ "renderer"
				~ "background image as 2nd optional parameter",
			/ @ "class %Desktop" $=
			(
				* "no effect for background image argument" @ "destructor"
					$since b294,
				/ @ "constructor" $=
				(
					+ "buffered renderer parameter",
					/ "made renderer through buffer from screen as back buffer \
						when renderer not specified"
				)
			),
			/ @ "constructor" @ "class %BufferedRenderer" @ %'YRenderer' $=
			(
				/ "defaulted creating a new buffer when provided buffer \
					argument is null",
				/ "simplified default argument as '{}'"
			)
		),
		/ "platform %MinGW32" @ %'Helper'.'HostWindow' $=
		(
			+ $dev "virtual member function %Window::Refresh" @ %'HostWindow',
			/ $design
				"increased performance of render windows updating a little",
		)
	),
	/ "made video initialization more" @ "function %ResetVideo" ~ "InitVideo"
		@ "platform %DS" @ %'YCLib'.'Video',
	* "misleading iterator category" @ "template parameters" @ "function \
		template %ystdex::(erase_all, erase_all_if) for associative containers"
		$since b289
		// Containers require forward iterators, not input iterators.
),

b406
(
	/ %'YFramework'.'YSLib' $=
	(
		/ %'Service'.'YGDI' $=
		(
			/ @ "interface %IImage" $=
			(
				+ "abstract method %Clone",
				+ 'ynothrow' @ "method %GetContext"
			);
			+ "class %BasicImage implementing %IImage";
			/ "inheritance of %BitmapBuffer" ^ "BasicImage"
		);
		/ "class %BufferedRenderer" %'UI'.'YRenderer' $=
		(
			/ "buffer" ^ "%unique_ptr<Drawing::IImage>"
				~ "public %BitmapBuffer",
			+ "buffer setting"
		)
	),
	/ DLP "library using" $=
	(
		/ freetype build \conf updated $=
		(
			/ "'modules.cfg' adjusted to fit actual library and rebuilt",
			- '-g' "compiler option" @ "platform %DS"
		);
		^ "recompiled library freetype,
			// See $known_issue_b406.
	),
),

b405
(
	/ %'YFramework' $=
	(
		/ %'Helpers' $=
		(
			/ $dev "class %FPSCounter" @ %'ShellHelper' ^ "types \
				%std::chrono::nanoseconds, %std::size_t"
				~ "unsigned integer types",
			/ @ "%platform MinGW32" $=
			(
				/ "updated only validated area instead of whole widget \
					renderer buffer to improve performance",
				* %"repeated calls to %::GetDC without releasing" $since b386
			)
		),
		/ %'YSLib' $=
		(
			/ @ "class %Timer" @ %'Services' $=
			(
				- "association operations; deactivation, object counting";
					// Activation states is not stored within the timer. \
						Activation only means the timer has the right base \
						tick. This saves significant resource. Users should \
						track the state manually if really needed.
				/ $dev "made interval as public accessible data member"
			),
			/ $dev "protected member %Graphics::size" => "%sGraphics"
				@ %'Core'.'YGDIBase',
			/ %'YGDI' $=
			(
				(
				+ "interface %IImage";
				+ "inheritance %IImage" @ "class %BitmapBuffer"
				),
				/ "class %BitmapBuffer" $=
				(
					- 'using Graphics::GetSizeOfBuffer',
					/ "made member function %GetContext virtual"
				),
				/ @ "classes %(BitmapBuffer, BitmapBufferEx)" $=
				(
					/ $dev "allocation and deallocation" ^ "%unique_ptr"
						~ "%(ynew, ydelete_array)",
					/ "member functions %SetSize" ^ "parameter %'const Size&'"
						~ "2 %SDst",
					/ "allocation fails" @ "member functions %SetSize"
						^ "distinguishable and clearer exception strings"
				),
				+ 'using %BitmapBuffer::SetSize' @ "class %BitmapBufferEx"
			)
		)
		/ @ "%platform DS" @ %'YCLib' $=
		(
			+ "function inline %DMAFillWordsAsync" @ %'NativeAPI',
			/ %'Video' $=
			(
				- "cache flush before DMA copying"
					@ "function %ScreenSynchronize",
				- "fill zeros" @ "function %ResetVideo"
				// These make performance a little improved.
			)
		);
	),
	- $dev $repo "pattern glob '*/build*'" @ "file %.hgignore",
	+ $dev "files for build FreeType2"
	/ $doc "reconstructed most YSLib documentation"
		@ "%Documentation::Designation" >> "%Documentation::YSLib"
),

b404
(
	/ %'YReader'.'shell' $=
	(
		/ "widget layout",
		- "touch screen desktop background image",
		!^ DLD "magic number of image pointer array size"
	),
	(
	+ "access history model template class %GAccessList"
		@ %'YFramework'.'YSLib'.'Service';
	/ $dev "simplified implementation" @ "reading list"
		@ %'YReader'.'text reader'
	)
),

b403
(
	/ %'YFramework' $=
	(
		/ %'YSLib'.'Core' $=
		(
			/ @ "class %String" $=
			(
				/ "simplified constructor template",
				- $dev $lib "static member object for encoding convesion";
				* $comp "thread-safety and reentrance on constructing"
					$since $before b132
			),
			/ %'YFileSystem' $=
			(
				/ @ "class %Path" $=
				(
					/ "allowed specifying encoding" @ "constructor template",
					/ "simplified non-template constuctors",
					/ "public inheritance %String" -> "explicit conversion \
						functions to %(String&, const String&),
					+ "member function %Swap",
					+ "fully implementation"
						@ "member functions %(GetExtension, GetStem)"
				),
				- "namespace scope objects %(FS_Now_X, FS_Parent_X)",
				- "functions %(SplitPath, 2 HaveSameStems, 2 GetExtensionOf, \
					2 IsExtensionOf, 2 HaveSameExtensions, GetStemOf, \
					2 IsStemOf, 2 GetFileNameOf)
					// Use member functions of %Path instead.
			),
			/ "member functions for adding and removing nodes"
				@ "class %ValueNode" $=
			(
				+ "member functions %(Add, Remove) returing %bool",
				/ "member functions %operator(+=, -=) returning %ValueNode&"
			)
		),
		/ %'YCLib'.'NativeAPI $=
		(
			- "object placeholder 'static int t'"
			/ $comp DLB "reduced warning [-funused-variable]"
		),
		/ DLB "implementation to reduce warning [-funused-variable]"
			@ "configuration %'release_*'" @ "function %TestFramework"
			@ %'Helper',
		* "missing 'YF_API'" @ "friend function %operator>>"
			@ %'NPL'.'Configuration' $since b362
	)
),

b402
(
	/ %'YFramework' $=
	(
		/ %'CHRLib' $=
		(
			- "namespace macros",
			+ "3 function templates %MakeUCS2LEString" @ %CharacterProcessing
		),
		/ %'YCLib' $=
		(
			/ $dev "normalized header including with prefix 'YCLib/'",
			/ @ "platform %MinGW32" @ %'NativeAPI' $=
			(
				/ "simplified including" ,
					// Reduced some name pollution.
				- "directory APIs"
			),
			/ %'FileSystem' $=
			(
				/ "class %FileNode" @ "platform %MinGW32" ^ "MinGW \
					wide-oriented directory APIs" ~ "custom UTF-8 APIs",
				* "spell error" $since b171
					$= (/ %YCL_PATH_SEPERATOR => %YCL_PATH_SEPARATOR),
				+ "static asserts to check delimiter and separator constraints",
				+ "file system path encoding constant %CS_Path";
				$dep_to "FileSystem"
			)
		),
		/ %'YSLib' $=
		(
			* DLB "missing header %(YSLib/YAdaptor/YTextBase.h, \
				CHRLib/Convert.hpp)" @ "VC++ project" $since b400,
			/ %'Adaptor'.'YAdaptor' $=
			(
				(
				$dep_from "FileSystem";
				+ "using %CS_Path" @ "namespace %YSLib::IO",
				$dep_to "CS_Path"
				);
				/ "all file system related name" @ "namespace %YSLib"
					>> "namespace %YSLib::IO"
			),
			/ %'Core'.'YFileSystem' $=
			(
				* "spell error" $since $before b132
					$= (/ %FS_Seperator => %FS_Separator),
				(
				$dep_from "CS_Path";
				/ "file system path encoding constant %CS_Path" ~ "%CP_Path";
				- "%CP_Path"
				)
			)
		)
	),
	/ $doc "made expected non-sentance Doxygen especially for directive '\sa'",
	* "missing including header %Functional"
		@ %'YBase'.'YStandardEx'.'AnyIterator' $since b355
),

b401
(
	/ @ %'YFramework'.'Helper' $=
	(
		/ "platform %MinGW32" $=
		(
			/ 'yconstexpr wchar_t WindowClassName[]{L"YFramework Window"}'
				@ "non-public header" >> %'HostWindow',
			+ "2 function templates %WrapWidget" @ "namespace %Host" @ %'HostUI'
		),
		(
		+ "public member %IdleSleep" @ "class %GUIShell" @ %'GUIShell';
		/ "GUI sleep" @ "member function %GUIApplication::DealMessage"
			>> "class %GUIShell"
			// It is only used on hosted environment by default for \
				performance.
		)
	),
	/ $dev $build @ "Code::Blocks projects" $=
	(
		/ "simplified library dependencies",
		+ "pararrel compiling support" @ "makefile commands" @ "platform %DS"
	),
	/ $build "headers of library %freetype" @ "project %YFramework"
		>> "directory %3rdparty/include" ~ "directory %YFramework/include"
		// For convenience, the main YFramework VC++ project is still \
			containing these items, as for "/doc". And it is required to put \
			the directory "3rdpraty" into the header searching path by user, \
			since FreeType2 headers are explicitly included by header \
			"YSLib/Adaptor/Font.h".
),

b400
(
	/ %'YRader' $=
	(
		/ %'text reader' $=
		(
			+ "bookmarks saving and loading",
			(
			$ dep_from "fixed text open mode";
			* $comp "dead loop or wrong position calculated after reader \
				reaching EOF" @ "some files" @ "%platform MinGW32" $since b299
			)
		),
		/ $dev "cleanup" @ %('main', 'shells')
			// Eliminated warning[-Wmissing-declarations].
	),
	/ %'YBase'.'YStandardEx' $=
	(
		/ @ %'AnyIterator' $=
		(
			+ "template parameter for difference type"
				@ "class tempalte %any_input_iterator),
			(
			+ "class templates %(any_forward_iterator, \
				any_bidirectional_iterator)";
			+ "typedefs %(forward_monomorphic_iterator, \
				bidirectional_monomorphic_iterator)
			)
		),
		/ $dev "inheritance and member typedefs cleanup"
			@ "class templates" @ 'Iterator',
		(
		- "all entities %(is_dereferncable, check_dereferncable)";
		* $comp "spelling error" $since b249
		),
		* spell error $since b250 $=
		(
			/ "%is_undereferencable" => "%is_undereferenceable",
			/ "%check_undereferencable" => "%check_undereferenceable"
		)
	),
	/ %'YFramework',
	(
		/ %'CHRLib' $=
		(
			/ %'encoding conversion' $=
			(
				* "implementation" @ "function %MBCToUC#2" $since b299,
				/ "reduced duplicate call of mapping function fetching"
					@ "conversion for string",
				+ $dev "assertions as null pointer check"
			)
			+ "header %Convert.hpp"
		),
		/ %'YSLib' $=
		(
			/ "class %TextFileBuffer" @ %'Service' $=
			(
				(
				* "wrongly using text open mode with random position \
					calculation" $since b273,
					// It seems that DS ignores difference between text and \
						binary mode like POSIX systems, so only affected on \
						platform %MinGW32.
				$ dep_to "fixed text open mode"
				),
				/ "reduced duplicate call of mapping function fetching"
					@ "random accessing"
			),
			/ %'Adaptor' $=
			(
				/ %'YAdaptor' $=
				(
					/ DLD "simplified including headers",
					- "namespace %YSLib::Pattern"
				),
				+ "header %YTextBase.h"
			)
		)
	)
);

////

