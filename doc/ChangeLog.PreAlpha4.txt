/*
	Copyright by FrankHB 2013.

	This file is part of the YSLib project, and may only be used,
	modified, and distributed under the terms of the YSLib project
	license, LICENSE.TXT.  By continuing to use, modify, or distribute
	this file you indicate that you have read the license and
	understand and accept it fully.
*/

/*!	\file ChangeLog.PreAlpha4.txt
\ingroup Documentation
\brief 版本更新历史记录 - PreAlpha4 。
\version r540
\author FrankHB <frankhb1989@gmail.com>
\since build 400
\par 创建时间:
	2013-04-20 11:19:07 +0800
\par 修改时间:
	2013-05-31 22:00 +0800
\par 文本编码:
	UTF-8
\par 模块名称:
	Documentation::ChangeLog::PreAlpha4
*/

// See "Meta.cpp" for meta discriptions.

$import $HISTORY;

// Scope: [b400, $now];

$now
(
	/ %'YFramework' $=
	(
		/ $dev "all %Swap" => 'swap',
		/ $dev "all %Clone" => 'clone',
		/ %'YSLib' $=
		(
			/ %'Core' $=
			(
				/ $dev %'YBaseMacro' $=
				(
					/ "macro %DefClone(_q, _t, n)" -> "%DefClone(_q, _t)",
						// Thus all member function name 'Clone' unified as \
							'clone'.
					+ "macro %DefSwap",
					/ "macro %yJOIN" >> 'YBase'.'YDefinition'
				),
				+ "non-member function template %swap for specification of \
					%GEvent" @ %'YEvent',
				+ "non-member function %swap for ,
				+ "non-member function %swap for classs"
					%(Message @ %'YMessage', ValueObject" @ %'YObject'),
				/ %'YFileSystem' $=
				(
					$dep_from %'YCLib'.'FileSystem'
					+ $dev "template specification \
						%ystdex::file_path_norm<YSLib::String>",
					+ $dev "typedef name %ypath";
					/ @ "class %Path" $=
					(
						- "all static member object %(Slash, Now, Parent)",
						/ $dev "implementation" ^ "inheritance %ypath"
							~ "string member",
						- "member functions %('Has*', 'GetRoot*',
							GetRelativePath, GetParentPath, GetFilename,
							GetStem, MakeAbsolute, RemoveFilename,
							ReplaceExtension, NormalizeTrailingSlash),
						+ "iterator typedef names" -> "using
							%ybase::(iterator, const_iterator)",
						+ "typedef %StringType' -> "%value_type",
						/ "2 conversion functions for string referendce"
							-> "conversion function for %String"
						+ "using %ypath::(back, front, begin, end, cbegin, cend,
							iterator, const_iterator, value_type, insert, erase,
							is_absolute, is_relative, empty, clear, size)",
						+ "declarations for friend operator %(==, <) using \
							bases but not native strings"
					)
					- "functions %(GetDirectoryNameOf, 2 ChangeDirectory)"
				)
			),
			+ "non-member function template %swap for class %(BitmapBuffer, \
				BitmapBufferEx)" @ %'Service'.'YGDI'
		),
		/ $dev %'YCLib'.'FileSystem' $=
		(
			$dep_from %'YBase'.'YDefinition';
			+ "function bool platform_ex::FS_IsRoot(const ucs2_t*)"
				@ "platform %DS",
			+ "macro %(YCL_FS_StringIsCurrent, YCL_FS_StringIsParent,
					YCL_FS_CharIsDelimiter, YCL_FS_StringIsRoot)"
		)
	),
	/ $dev %'YBase' $=
	(
		/ %'YStadardEx' $=
		(
			/ "tempalte specification %path<std::string>"
				@ %'YStandardEx'.'Path' -> "partial specification \
				%path<std::basic_string<_tChar, _tAlloc>>",
			/ %'String' $=
			(
				/ "typedef name %string_traits::value_type to adapt to \
					non-class C-style string types",
				+ "2 function templates %string_length"
			)
		),
		+ "macro %yjoin" @ %'YDefinition'
	)
),

b408
(
	/ %'YBase' $=
	(
		* "implementation" @ '#define ynothrow' @ "!defined 'YB_HAS_NOEXCEPT'
			@ 'YDefinition' $since b319,
		/ %'YStandardEx' $=
		(
			/ DLD "all 'std::enable_if' excluding 'using std::enable_if'"
				-> 'enable_if' @ "namespace %ystdex",
		),
		/ $lib %'TypeOperation' $=
		(
			* "macro %YB_TYPE_OP_TEST_2" $since b399;
			* $comp "broken %(details::have_equality_operator,
				ystdex::has_equality_operator)" $since b399
		),
		+ $dev $doc "member grouping Doxygen comments for some random access \
			iterator templates" %'Iterator',
		(
			+ "class templates %(container_adaptor; sequence_container_adaptor)"
				 @ %'Container';
			+ %'Path' $=
			(
				+ "class template %path";
				+ "free function templates for %path"
			)
		),
		/ %'String' $=
		(
			/ "all 2 function tmplates %split" => "%split_l";
				// Marked as "left" because left delimiter is reserved.
			+ "2 function templates %split"
				// New return type is void instead of iterator type.
		),
		/ DLD "normalized template parameters as convention: \
			%(_fPred, _tCont, _tSeqCont)"
	)
),

b407
(
	/ %'YFramework'.'YSLib' $=
	(
		/ $dev @ %'Service'.'YGDI' $=
		(
			/ "interface %IImage" >> 'Core'.'YGDIBase',
			/ "all 'u8'" -> 'PixelType::AlphaType' @ %YGDI
		),
		+ $dev "virtual member function %GraphicDevice::GetBackBuffer"
			@ %'Core'.'YDevice',
		/ %'UI' $=
		(
			/ "constructor" @ "%Window" ^ "renderer"
				~ "background image as 2nd optional parameter",
			/ @ "class %Desktop" $=
			(
				* "no effect for background image argument" @ "destructor"
					$since b294,
				/ @ "constructor" $=
				(
					+ "buffered renderer parameter",
					/ "made renderer through buffer from screen as back \
						buffer when renderer not specified"
				)
			),
			/ @ "constructor" @ "class %BufferedRenderer" @ %'YRenderer' $=
			(
				/ "defaulted creating a new buffer when provided buffer \
					argument is null",
				/ "simplified default argument as '{}'"
			)
		),
		/ "platform %MinGW32" @ %'Helper'.'HostWindow' $=
		(
			+ $dev "virtual member function %Window::Refresh" @ %'HostWindow',
			/ $design
				"increased performance of render windows updating a little",
		)
	),
	/ "made video initialization more" @ "function %ResetVideo" ~ "InitVideo"
		@ "platform %DS" @ %'YCLib'.'Video',
	* "misleading iterator category" @ "template parameters" @ "function \
		template %ystdex::(erase_all, erase_all_if) for associative containers"
		$since b289
		// Containers require forward iterators, not input iterators.
),

b406
(
	/ %'YFramework'.'YSLib' $=
	(
		/ %'Service'.'YGDI' $=
		(
			/ @ "interface %IImage" $=
			(
				+ "abstract method %Clone",
				+ 'ynothrow' @ "method %GetContext"
			);
			+ "class %BasicImage implementing %IImage";
			/ "inheritance of %BitmapBuffer" ^ "BasicImage"
		);
		/ "class %BufferedRenderer" %'UI'.'YRenderer' $=
		(
			/ "buffer" ^ "%unique_ptr<Drawing::IImage>"
				~ "public %BitmapBuffer",
			+ "buffer setting"
		)
	),
	/ DLP "library using" $=
	(
		/ freetype build \conf updated $=
		(
			/ "'modules.cfg' adjusted to fit actual library and rebuilt",
			- '-g' "compiler option" @ "platform %DS"
		);
		^ "recompiled library freetype,
			// See $known_issue_b406.
	),
),

b405
(
	/ %'YFramework' $=
	(
		/ %'Helpers' $=
		(
			/ $dev "class %FPSCounter" @ %'ShellHelper' ^ "types \
				%std::chrono::nanoseconds, %std::size_t"
				~ "unsigned integer types",
			/ @ "%platform MinGW32" $=
			(
				/ "updated only validated area instead of whole widget \
					renderer buffer to improve performance",
				* %"repeated calls to ::GetDC without releasing" $since b386
			)
		),
		/ %'YSLib' $=
		(
			/ @ "class %Timer" @ %'Services' $=
			(
				- "association operations; deactivation, object counting";
					// Activation states is not stored within the timer. \
						Activation only means the timer has the right base \
						tick. This saves significant resource. Users should \
						track the state manually if really needed.
				/ $dev "made interval as public accessible data member"
			),
			/ $dev "protected member %Graphics::size" => "%sGraphics"
				@ %'Core'.'YGDIBase',
			/ %'YGDI' $=
			(
				(
					+ "interface %IImage";
					+ "inheritance %IImage" @ "class %BitmapBuffer"
				),
				/ "class %BitmapBuffer" $=
				(
					- 'using Graphics::GetSizeOfBuffer',
					/ "made member function %GetContext virtual"
				),
				/ @ "classes %(BitmapBuffer, BitmapBufferEx)" $=
				(
					/ $dev "allocation and deallocation" ^ "%unique_ptr"
						~ "%(ynew, ydelete_array)",
					/ "member functions %SetSize" ^ "parameter %'const Size&'"
						~ "2 %SDst",
					/ "allocation fails" @ "member functions %SetSize"
						^ "distinguishable and clearer exception strings"
				),
				+ 'using %BitmapBuffer::SetSize' @ "class %BitmapBufferEx"
			)
		)
		/ @ "%platform DS" @ %'YCLib' $=
		(
			+ "function inline %DMAFillWordsAsync" @ %'NativeAPI',
			/ %'Video' $=
			(
				- "cache flush before DMA copying"
					@ "function %ScreenSynchronize",
				- "fill zeros" @ "function %ResetVideo"
				// These make performance a little improved.
			)
		);
	),
	- $dev $repo "pattern glob '*/build*'" @ "file %.hgignore",
	+ $dev "files for build FreeType2"
	/ $doc "reconstructed most YSLib documentation"
		@ "%Documentation::Designation" >> "%Documentation::YSLib"
),

b404
(
	/ %'YReader'.'shell' $=
	(
		/ "widget layout",
		- "touch screen desktop background image",
		!^ DLD "magic number of image pointer array size"
	),
	(
		+ "access history model template class %GAccessList"
			@ %'YFramework'.'YSLib'.'Service';
		/ $dev "simplified implementation" @ "reading list"
			@ %'YReader'.'text reader'
	)
),

b403
(
	/ %'YFramework' $=
	(
		/ %'YSLib'.'Core' $=
		(
			/ @ "class %String" $=
			(
				/ "simplified constructor template",
				- $dev $lib "static member object for encoding convesion";
				* $comp "thread-safety and reentrance on constructing"
					$since $before b132
			),
			/ %'YFileSystem' $=
			(
				/ @ "class %Path" $=
				(
					/ "allowed specifying encoding" @ "constructor template",
					/ "simplified non-template constuctors",
					/ "public inheritance %String" -> "explicit conversion \
						functions to %(String&, const String&),
					+ "member function %Swap",
					+ "fully implementation"
						@ "member functions %(GetExtension, GetStem)"
				),
				- "namespace scope objects %(FS_Now_X, FS_Parent_X)",
				- "functions %YF_API %(SplitPath, 2 HaveSameStems, \
					2 GetExtensionOf, 2 IsExtensionOf, 2 HaveSameExtensions, \
					GetStemOf, 2 IsStemOf, 2 GetFileNameOf)
					// Use member functions of %Path instead.
			),
			/ "member functions for adding and removing nodes"
				@ "class %ValueNode" $=
			(
				+ "member functions %(Add, Remove) returing %bool",
				/ "member functions %operator(+=, -=) returning %ValueNode&"
			)
		),
		/ %'YCLib'.'NativeAPI $=
		(
			- "object placeholder 'static int t'"
			/ $comp DLB "reduced warning [-funused-variable]"
		),
		/ DLB "implementation to reduce warning [-funused-variable]"
			@ "configuration %'release_*'" @ "function %TestFramework"
			@ %'Helper',
		* "missing 'YF_API'" @ "friend function %operator>>"
			@ %'NPL'.'Configuration' $since b362
	)
),

b402
(
	/ %'YFramework' $=
	(
		/ %'CHRLib' $=
		(
			- "namespace macros",
			+ "3 function templates %MakeUCS2LEString" @ %CharacterProcessing
		),
		/ %'YCLib' $=
		(
			/ $dev "normalized header including with prefix 'YCLib/'",
			/ @ "platform %MinGW32" @ %'NativeAPI' $=
			(
				/ "simplified including" ,
					// Reduced some name pollution.
				- "directory APIs"
			),
			/ %'FileSystem' $=
			(
				/ "class %FileNode" @ "platform %MinGW32" ^ "MinGW \
					wide-oriented directory APIs" ~ "custom UTF-8 APIs",
				* "spell error" $since b171
					$= (/ %YCL_PATH_SEPERATOR => %YCL_PATH_SEPARATOR),
				+ "static asserts to check delimiter and separator constraints",
				+ "file system path encoding constant %CS_Path";
				$dep_to "FileSystem"
			)
		),
		/ %'YSLib' $=
		(
			* "missing header %(YSLib/YAdaptor/YTextBase.h, CHRLib/Convert.hpp)"
				@ VC++ \proj $since b400,
			/ %'Adaptor'.'YAdaptor' $=
			(
				(
					$dep_from "FileSystem";
					+ "using %CS_Path" @ "namespace %YSLib::IO",
					$dep_to "CS_Path"
				);
				/ "all file system related name" @ "namespace %YSLib"
					>> "namespace %YSLib::IO"
			),
			/ %'Core'.'YFileSystem' $=
			(
				* "spell error" $since $before b132
					$= (/ %FS_Seperator => %FS_Separator),
				(
					$dep_from "CS_Path";
					/ "file system path encoding constant %CS_Path"
						~ "%CP_Path";
					- "%CP_Path"
				)
			)
		)
	),
	/ $doc "made expected non-sentance Doxygen especially for directive '\sa'",
	* "missing including header %Functional"
		@ %'YBase'.'YStandardEx'.'AnyIterator' $since b355
),

b401
(
	/ @ %'YFramework'.'Helper' $=
	(
		/ "platform %MinGW32" $=
		(
			/ 'yconstexpr wchar_t WindowClassName[]{L"YFramework Window"}'
				@ "non-public header" >> %'HostWindow',
			+ "2 function templates %WrapWidget" @ "namespace %Host" @ %'HostUI'
		),
		(
			+ "public member %IdleSleep" @ "class %GUIShell" @ %'GUIShell';
			/ "GUI sleep" @ "member function %GUIApplication::DealMessage"
				>> "class %GUIShell"
				// It is only used on hosted environment by default for \
					performance.
		)
	),
	/ $dev $build @ "Code::Blocks projects" $=
	(
		/ "simplified library dependencies",
		+ "pararrel compiling support" @ "makefile commands" @ "platform %DS"
	),
	/ $build "headers of library %freetype" @ "project %YFramework"
		>> "directory %3rdparty/include" ~ "directory %YFramework/include"
		// It is required to put the directory "3rdpraty" into the header \
		//	searching path by user, since FreeType2 headers are explicitly \
		//	included by header "YSLib/Adaptor/Font.h".
),

b400
(
	/ %'YRader' $=
	(
		/ %'text reader' $=
		(
			+ "bookmarks saving and loading",
			(
				$ dep_from "fixed text open mode";
				* $comp "dead loop or wrong position calculated after \
					reader reaching EOF" @ "some files" @ "%platform MinGW32"
					$since b299
			)
		),
		/ $dev "cleanup" @ %('main', 'shells')
			// Eliminated warning[-Wmissing-declarations].
	),
	/ %'YBase'.'YStandardEx' $=
	(
		/ @ %'AnyIterator' $=
		(
			+ "template parameter for difference type"
				@ "class tempalte %any_input_iterator),
			(
				+ "class templates %(any_forward_iterator,
					any_bidirectional_iterator)";
				+ "typedefs %(forward_monomorphic_iterator,
					bidirectional_monomorphic_iterator)
			)
		),
		/ $dev "inheritance and member typedefs cleanup"
			@ "class templates" @ 'Iterator',
		(
			- "all entities %(is_dereferncable, check_dereferncable)";
			* $comp "spelling error" $since b249
		),
		* spell error $since b250 $=
		(
			/ "%is_undereferencable" => "%is_undereferenceable",
			/ "%check_undereferencable" => "%check_undereferenceable"
		)
	),
	/ %'YFramework',
	(
		/ %'CHRLib' $=
		(
			/ %'encoding conversion' $=
			(
				* "implementation" @ "function %MBCToUC#2" $since b299,
				/ "reduced duplicate call of mapping function fetching"
					@ "conversion for string",
				+ $dev "assertions as null pointer check"
			)
			+ "header %Convert.hpp"
		),
		/ %'YSLib' $=
		(
			/ "class %TextFileBuffer" @ %'Service' $=
			(
				(
					* "wrongly using text open mode with random position \
						calculation", $since b273;
					// It seems that DS ignores difference between text and \
						binary mode like POSIX systems, so only affected on \
						platform %MinGW32.
					$ dep_to "fixed text open mode"
				),
				/ "reduced duplicate call of mapping function fetching"
					@ "random accessing"
			),
			/ %'Adaptor' $=
			(
				/ @ \h YAdaptor $=
				(
					/ DLD "simplified including headers",
					- "namespace %YSLib::Pattern"
				),
				+ "header %YTextBase.h"
			)
		)
	)
);

////

