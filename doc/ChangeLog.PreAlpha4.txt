/*
	Copyright by FrankHB 2013.

	This file is part of the YSLib project, and may only be used,
	modified, and distributed under the terms of the YSLib project
	license, LICENSE.TXT.  By continuing to use, modify, or distribute
	this file you indicate that you have read the license and
	understand and accept it fully.
*/

/*!	\file ChangeLog.PreAlpha4.txt
\ingroup Documentation
\brief 版本更新历史记录 - PreAlpha4 。
\version r1340
\author FrankHB <frankhb1989@gmail.com>
\since build 400
\par 创建时间:
	2013-04-20 11:19:07 +0800
\par 修改时间:
	2013-07-07 07:07 +0800
\par 文本编码:
	UTF-8
\par 模块名称:
	Documentation::ChangeLog::PreAlpha4
*/

// See "Meta.cpp" for meta discriptions.

$import $HISTORY;

// Scope: [b400, $now];

$now
(
	/ %'YFramework' $=
	(
		/ @ "platform %MinGW32" @ %'Helper' $=
		(
			* "cursor across host window boundary" $= $since b388,
			* "wrong location of initializing raw input" $since b423
				// The initialization should be at initialization of host \
					window, but not the shell input manager.
			(
				* "missing triggling %KeyUp" $since b422
				$dep_to "triggling %KeyUp"
			)
		),
		* "corrupted wrong screen output" @ "platform %DS" $since b405
			$= (/ $revert(b405) "flush cache" @ "function %ScreenSynchronize"
				@ %'YCLib'.'Video'),
		/ %'YSLib'.'UI' $=
		(
			/ %'YControl' $=
			(
				// Now event %(Enter, Leave) can be automatically synthesized.
				/ "function %OnKey_Bound_TouchUpAndLeave"
					-> "%OnKey_Bound_TouchUp",
				/ "function %OnKey_Bound_EnterAndTouchDown"
					-> "%OnKey_Bound_TouchDown"
			),
			/ @ "class %GUIState" @ %'YGUI' $=
			(
				(
					/ $revert(b421) "member function %GUIState::ResponseKey \
						allowed routed events,
					/ "events %(TouchUp, TouchDown) handled by wrapped handlers";
						// So manually sent touch events can be handled with \
							GUI state changes, and no need to bind \
							%OnKey_Bound_Click.
					* $comp "bound missing automatically triggling control \
						%(Leave, Click) events" $since b421;
					$dep_from "triggling %Leave";
				),
				/ "events %(KeyUp, KeyDown) handled by wrapped handlers",
					// So manually sent key events can be handled with GUI \
						state changes.
				/ "all returning value of member function %'Response*' \
					discarded"
			),
			(
				$dep_from "triggling %KeyUp",
				$dep_from "triggling %Leave";
				* $comp "missing responding forwarding tunnel key accerators"
					$since b421
			)
		)
	)
),

b423
(
	/ DLD "all '= false'" -> "'= {}' for well-formed use of pointer types as \
		left operands",
	* $design "platform-dependent bool type xor operation" @ "function \
		%openmode_conv#2" @ %'YBase'.'YStandardEx'.'CStandardIO' $since b326,
	/ %'YFramework' $=
	(
		/ %'YSLib'.'UI' $=
		(
			/ %'YWidgetEvent' $=
			(
				+ "event enumerator %CursorWheel" @ "%VisualEvent",
				(
					+ "typedef %WheelDelta";
					+ "class %CursorWheelEventArgs";
					+ "typedef %HWheelEvent"
				),
				+ "virtual destructor" @ "class %UIEventArgs"
			);
			/ @ "class %GUIState" @ %'YGUI' $=
			(
				+ "member funtcion %ResponseCursorIndirect";
				/ "member funtcion %ResponseTouchBase" -> "%ResponseCursorBase";
				/ "member funtcion %ResponseTouch" -> "%ResponseCursor"
			);
			+ "%CursorWheel support for class %AScrollBar" @ %'Scroll'
		),
		/ %'Helper' @ "platform %MinGW32" $=
		(
			+ "raw input support for mouse wheel";
			+ "wheel input forwarding" @ "class %InputManager"
		)
	)
),

b422
(
	/ %'YFramework' $=
	(
		/ %'YSLib'.'UI' $=
		(
			/ %'YWidgetEvent' $=
			(
				/ "event enumerator %CursorMove" => "%CursorOver",
				/ "typedef %TouchEvent" => "%CursorEvent",
				/ "class %TouchEventArgs" => "%CursorEventArgs",
				/ "class %HTouchEvent" => "%HCursorEvent"
			),
			/ %'YGUI' $=
			(
				$dep_from %'Helper'.'InputManager';
				+ "responsing event %CursorOver",
				+ "independent cursor focus pointer";
				+ "support for %(Enter, Leave) generated by %CursorOver",
				/ "member function %IsControlEntered" => "%IsEntered",
				+ "member function %(GetCursorOverPtr, Wrap)",
			),
			/ "%(Enter, Leave) now only generated for derived classes of \
				%Control as default"
		),
		+ "forwarding %CursorOver through %TouchUp with empty key set"
			@ "platform %MinGW32" @ %'Helper'.'InputManager'
	)
),

b421
(
	+ "function templates %(hash_combine; 3 hash_combine_seq, 2 hash_range)"
		@ %'YBase'.'YStandardEx'.'Functional',
	/ %'YFramework' $=
	(
		/ %'YSLib' $=
		(
			/ %'Adaptor'.'Font' $=
			(
				$dep_from %'YBase'.'YStandardEx'.'Functional';
				+ "style hashing" @ "glyph bitmap cacheing",
				/ "member function %Font::SetStyle to allow non-regular style \
					setting when typeface exists";
				+ "support for bold and italic bitmap glyphs"
					// But no support of typefaces for specific styles currently.
			),
			/ %'UI' $=
			(
				/ "all event handlers of %TouchMove" -> "TouchHeld",
				/ %'YControl' $=
				(
					- "function %OnTouchMove",
					/ "function %OnTouchMove_Dragging"
						=> "%OnTouchHeld_Dragging"
				);
				/ "enumeration %VisualEvent" @ %'YWidgetEvent' $=
				(
					- "enumerator %TouchMove",
					+ "enumerator %CursorMove"
						// No effect currently.
				);
				/ @ "class %GUIState" @ %'YGUI' $=
				(
					/ "side effects of responsing %(TouchUp, KeyUp)" $=
					(
						/ "independent focus pointer now unconditionally reset",
						/ "(held state, dragging offset) now maintained"
					),
					/ "member function %GUIState::ResponseKey now only allowed \
						event called without other side effects (i.e. access \
						independent focus event and trying KeyPress when \
						possible) for indirect routing stratagy
				)
			)
		),
		/ $dev %'YBaseMacro' $=
		(
			+ DLD "including header %ydef.h",
			+ "macro %DefBitmaskEnumOperations"
		),
		* "wrongly dragged widgets after released dragging and moved cursor \
			out of boundary of host window touch event responding area"
			@ "platform %MinGW32" $since b388
	)
),

b420
(
	/ %'YFramework'.'Adaptor'.'Font' $=
	(
		/ "small bitmap cacheing using moving" ~ "copying",
		/ @ "class %Typeface" $=
		(
			/ DLD "assured non-null face",
			* "missing destructor" $since b419,
			+ "size cacheing"
		),
		/ @ "class %NativeFontSize" $=
		(
			+ $dev "private inheritance %noncopyable",
			/ $dev "constructor accept reference" ~ "pointer",
			+ "member function %Activate",
			- "redundant check"
		),
		* "destructor" @ "class %FontCache wrongly release library before \
			cleaning container" $since b419
			// It's OK for cached objects because no destructor would perform \
				multiple release when cache manager is cleared before the \
				library instance. But it's wrong without FreeType cache \
				manager and will cause multiple release of resources. Since \
				the destructor is missing, this problem is not explicit @ \
				b419, but resource leaks.
	),
	/ DLP "updated library freetype" @ "library using" $=
	(
		- "module configuration ('HINTING_MODULES += autofit',
			'AUX_MODULES += cache', 'BASE_EXTENSIONS += ftfstype.c',
			'BASE_EXTENSIONS += ftstroke.c', 'BASE_EXTENSIONS += ftsynth.c'),;
		^ "updated freetype 2.5.0.1 with several files remained"
			~ "freetype 2.4.11"
			// See [Documentation::Designation @@5.4.1.3] .
	)
),

b419
(
	/ %'YFramework' $=
	(
		/ %'Adaptor'.'Font' $=
		(
			+ "class %(FontException, NativeFontSize, SmallBitmapData)";
			/ @ "class %Typeface" $=
			(
				* "missing glyph index cache insertion failure check"
					$since b418,
				+ "2 member functions %GetTypefaceRef",
				(
					+ "glyph bitmap cache";
					+ "member function %ClearBitmapCache"
				)
			);
			- @ "class %FontCache" $=
			(
				- "size cache";
				- "FreeType cache manager";
				- "member function %(ResetGlyphCache, Reset)"
			),
			/ @ "class %Font" $=
			(
				/ "simplified data member",
				+ $dev $workaround "special member functions"
					// For G++ 4.7.1 there are several errors about implicitly \
						declared special member functions in derived class.
			),
		)
		/ $dev "access control" @ "inheriting class %LoggedEvent"
			@ "class %BadEvent" @ %'UI'.'YWidgetEvent' -> 'public' ~ 'private',
		* $design "platform-dependent bool type xor operation" @ "assertion"
			@ "member function %(CompactPixmap, CompactPixmapEx)::SetSize, \
			CompactPixmapEx::SetSize" $since b176
			@ %'(BitmapBuffer, BitmapBufferEx)::SetSize'
	),
	/ DLD "all '= nullptr'" -> "'= {}' for well-formed use of pointer types as \
		left operands"
),

b418
(
	/ DLD "header %ft2build.h" @ "directory %YFramework/include"
		>> "directory %3rdparty/include",
	/ %'YFramework'.'YSLib' $=
	(
		/ %'Service'.'YGDI' $=
		(
			/ "class %BitmapBuffer" => "%CompactPixmap",
			/ "class BitmapBufferEx => "%CompactPixmapEx"
		),
		/ %'Adaptor' $=
		(
			/ "class NativePixmap" @ %'Image' => "%HBitmap",
			/ %'Font' $=
			(
				/ @ "class %FontCache" $=
				(
					^ "%unordered_map with %unique_ptr for %FontFamily \
						stored",
					/ "member function %ClearCache" => "%Reset",
					- "FreeType CMap cacheing"
						// Binary size enlarged. No performance impact.
				),
				+ "CMap cacheing" ^ "%unordered_map"
			)
		)
	)
),

b417
(
	+ "typedef octet" @ %'YBase'.'YDefinition',
	(
		+ "3rdparty library FreeImage";
		$dep_to "FreeImage"
	),
	/ %'YFramework' $=
	(
		/ $dev %'YCLib'.'Video' $=
		(
			/ "typedef Color::(MonoType, AlphaType)"
				-> "namespace scope typedef names" @ "namespace %platform",
			/ "macro %YCL_PIXEL_FORMAT_AXYZ1555" -> "%YCL_PIXEL_FORMAT_XYZ555"
				@ "platform %DS",
			+ "macro %YCL_PIXEL_FORMAT_XYZ888" @ "platform %MinGW32"
		),
		/ %'YSLib' $=
		(
			/ %'Adaptor' $=
			(
				(
					$dep_from %'YBase'.'YDefinition';
					+ "using %ystdex::(byte, octet)" @ %'YAdaptor';
				),
				$dep_from "FreeImage";
				+ "unit %Image"
			),
			/ %'Service' $=
			(
				+ "constructor 'BitmapBuffer(unique_ptr<PixelType[]>, \
					const Size&) ynothrow'",
				* "wrong source offset"
					@ "member function %ImageBrush::operator()" $since b294
			)
		),
		(
			$dep_from "FreeImage"
			/ $dev $build "FreeImage supported" @ "ARM9 Makefile"
				@ "platform %DS"
		)
	)
	* "library %YFramework" @ "configuration %release_DLL" @ "platform %MinGW32"
		"wrongly linked to 'YBase.dll' of configuration %debug" $since b362,
),

b416
(
	/ $dev %'YFramework'.'YSLib' $=
	(
		+ 'final' @ "all classes" @ %'Adaptor'.'Font',
		(
			/ "class %Timer" @ %'Service'.'Timer' $=
			(
				* "redundant member function declaration %Timer::RefreshAll"
					$since b405,
				+ "member function %Test",
				+ "virtual destructor"
			);
			/ @ "class %InputTimer" %'UI'.'GUI' $=
			(
				(
					- "member functions %(Delay, Reset)",
					/ "member function %Reset" => "%ResetInput";
					/ "publicly inherited class %Timers::Timer"
				),
				+ "member function %RefreshClick"
			)
		)
	),
	/ $dev "all typedef of unnamed enumerations" @ "C++ code"
		-> "non-typedef named enumerations",
	/ %'YReader' $=
	(
		/ %'text reader' $=
		(
			+ "double click to start auto scroll when not started already",
				// Intended to not limit the positions between clicks.
			(
				/ "saved reader box state on entering session and restored on \
					exit" @ base session;
				* $comp "reader box could overlap with text after returning \
					reading UI from other UI entered through context menu"
					$since b390
					// Currently "other UI" is setting or bookmark UI.
			)
		),
		- "background switch preview" @ %'shell test example',
		/ %'file explorer' $=
		(
			* "missing menu button binding" $since b360,
				// No effect when key pressed as button text indicated.
			/ "setting panel layout",
			/ "hexadecimal check box moved into setting panel",
			/ "file box layout",
			/ "about form position"
		)
	)
),

b415
(
	/ %'YBase'.'YStandardEx'.'Iterator' $=
	(
		/ @ \clt pointer_iterator $=
		(
			+ "non-null assertions" @ "several member functions",
			- 'const' @ "member functions postfix %operator(++, --),
			/ $dev "private member 'mutable pointer current'" -> 'pointer raw'
		),
		/ @ "class template %bitseg_iterator" $=
		(
			* "'yconstfn' and assertions for strict ISO C++11 compatibility"
				@ $since b414,
				// G++ didn't complain, but Clang++ does.
			- 'const' @ "member functions postfix %operator(++, --)
		),
		/ "implemented member functions %operator(+, -) supporting underlying \
			functions which don't returning types constrctible for \
			%pair_iterator" @ "class template %pair_iterator",
		/ @ \clt transformed_iterator $=
		(
			* "wrong overloaded member leading to copy constructor cannot
				be called for non-const reference type" $since b288,
			+ "explicitly defaulted copy constructor",
			+ "explicitly defaulted move constructor",
				// G++ 4.7.1 can't accept this overloading, so ignored as \
					workaround.
			+ "member functions %operator(+=, -=; +, -)"
				// Using %std::advance.
		)
	),
	/ %'YFramework'.'YSLib' $=
	(
		/ @ "class %CharBitmap" @ %'Adaptor'.'Font' $=
		(
			+ "typedef %PictchType; member function %GetPitch",
			+ "typedef %FormatType; member function %GetFormat"
		);
		/ %'Service' $=
		(
			(
				$dep_from %'YBase'.'YStandardEx'.'Iterator';
				/ "text rendering supporting negative pitch and non 255 gray \
					level bitmaps";
				* $comp "wrong dispatch of char format" $since b414,
				* $comp "bitmap rendering corrupting for font with non 255 \
					gray level embedded bitmaps" $since b185
			)
			/ $dev "all '%u8' for alpha value" -> ('Color::AlphaType'
				| "template parameter %_tAlpha") @ %'YBlit'
		)
	),
	/ %'YReader' $=
	(
		- "3 bitmaps" @ "shells background images";
		* $workaround "memory allocation failed exiting reader"
			@ "debug configuration" @ "platform %DS" $since b399
			// Still possible out-of-memory if the font file is too big.
	)
),

b414
(
	/ %'YBase'.'YStandardEx' $=
	(
		/ "implemented %stable_range_unique ADL with %std::swap" @ %'Algorithm',
		+ "2 function templates %sort_unique" @ %'Container',
		/ %'String'
		(
			(
				$dep_from %'Container',
				+ "function template %alph"
			),
			+ "function template %concat"
		),
		+ "class template %bitseg_iterator @ %'Iterator'
			// Currently only mutable underlying byte pointer is supported.
	),
	/ %'YFramework'.'YSLib' $=
	(
		/ %'Core' $=
		(
			(
				$dep_from %'YBase'.'YStandardEx'.'String';
				/ "implementation" @ "member function %String::operator="
					@ %'String'
					// More efficient.
			),
			/ "class %FileList" -> "function %ListFiles" @ %'YFileSystem'
		),
		(
			$dep_from %'Core'.'YFileSystem';
			/ "simplified inheritance and members" @ "class %FileBox" @ %'UI'
				// More space efficient.
		),
		/ %'Adaptors'.'Font' $=
		(
			/ "member function %Font::Getstyle" => "GetStyle";
			+ "member function %CharBitmap::GetGrayLevel"
		),
		/ %'Service' $=
		(
			/ "function template specializations %BlitScale implemented as \
				inline functions",
				// For more compact binary files.
			(
				$dep_from %'YBase'.'YStandardEx'.'Iterator';
				/ $dev "blitAlphaBlend supported for %bitseg_iterator as \
					source";
				$dep_to "%blitAlphaBlend"
			),
			(
				$dep_from "%blitAlphaBlend";
				/ "character renderer interface supported for bitmap source \
					other than 255 gray level"
			)
		)
	)
),

b413
(
	/ %'YFramework' $=
	(
		/ %'YCLib' $=
		(
			+ 'ynothrow' @ ("constructor %FileOperationFailure"
				@ %'YFileSystem',"member funtions %CursorInfo::(GetX, GetY)"
				@ %'Input', "member function %MappedFile::GetPtr"
				@ %'MemoryMapping', "2 functions %IsDirectory"
				@ "platform %MinGW32" @ %'NativeAPI', "all namespace scope \
				functions %'Fecth*'" @ %'Video')
			+ 'const' @ "member function %DirectorySession::GetNativeHandle"
				@ %'FileSystem'
			$dev
			(
				$dep_form %'YBaseMacro';
				^ %'YBaseMacro' @ %'YCLib'
			)
		),
		/ "saved initialization result to allow multiple initlization"
			@ "class %COM" %'YCLib_(MinGW32)'.'COM',
		/ $dev %'YBaseMacro' $=
		(
			/ "header %YBaseMacro[%ybasemac.h]" @ 'YSLib'.'Core'
				-> 'YBaseMacro'["YBaseMacro.h" @ "directory %YFramework"];
			/ "macro %ImplRet now allowed brace-init-list returned",
			/ "merged macro %DefEmptyDtor" -> %'DefDeDtor'
				// As of G++ 4.7.1 bug, using workaround as %DefEmptyDtor, \
					otherwise explicit defaulted function.
		),
		/ %'YSLib' $=
		(
			/ %'Core' $=
			(
				/ $dev %'YEvent' $=
				(
					/ @ "class templates %(GHEvent; GEvent; GDependencyEvent)"
						$=
					(
						/ "supported non-void returning type",
						- "typedef name %EventArgsType"
					),
					+ "typedef name %TupleType" @ "class template %GEvent",
					+ "template class %EventArgsTypeHead"
				),
				+ "member function String& operator*=(size_t)" @ "class %String"
					@ %'YString'
			),
			/ %'UI' $=
			(
				$dep_from %'Core'.'YEvent';
				- "function template %DoEvent#2"
			)
		)
	)
),

b412
(
	/ %'YBase' $=
	(
		/ "disabled macro %YB_USE_EXCEPTION_SPECIFICATION unconditionally \
			by default" @ %'YDefinition',
		/ %'YStandardEx' $=
		(
			- "typedef names %(const_path_t, path_t)" @ %'CStandardIO',
			(
				+ %'Variadic';
				/ "variadic meta types" @ %'TypeOperations' >> %'Variadic'
			),
			+ "struct %variadic_param; function template %varg" @ %'Functional',
			/ %'Iterator' $=
			(
				/ @ "class template %transformed_iterator" $=
				(
					/ "transformer interface",
						// Now producing value instead of iterator. Note it is \
							still distinct with boost.iterator, whose \
							%transform_iterator excepts a value but not \
							iterator as input.
					+ "2 member function %get_transformer"
				),
				+ "class template %indirect_input_iterator";
			)
		)
	),
	/ %'YFramework' $=
	(
		/ %'YCLib'.'FileSystem' $=
		(
			/ @ "class %HDirectory" $=
			(
				+ "member function %GetName";
				/ "%operator* now returning self reference to adapt to \
					%indirect_input_iterator"
			),
			$dep_from %'Iterator';
			/ "class %FileIterator" -> "typedef name of instantiated template \
				%indirect_input_iterator",
			/ $dev $lib "simplified header inclusion as \
				%Documentation::ProjectRules"
		),
		+ %'YCLib_(MinGW32)' $=
		(
			+ "common header file";
			+ "COM abstraction header file"
		),
		/ %'YSLib' $=
		(
			// All bugs below in this revision are checked by Clang++ 3.4 \
				(trunk183609) diagnostics, which all accepted by G++ 4.8.1 \
				silencely.
			/ %'Core' $=
			(
				* $dev "strictly use of constexpr conforming to ISO C++11 for \
					static data object %Invalid"
					@ "class template %GBinaryObject" @ %'GDIBase' $since b311
					// Resolved $known_issue_b351_1. Though C++1y may loose \
						the restrictions as allowing this invalid C++11 \
						construct. Note another restriction is already relaxed \
						in the draft WG21/N3691. See $ref b412 $note "N3652".
				* $dev "wrong 'yconstfn'" @ "constructor %Message" @ %'YMessage'
					$since b368,
					// Though G++ accepts invalid code, it is conforming \
						because "no diagnostics required" is explicitly stated \
						by ISO C++11.
				/ $dev %'YFileSystem' $=
				(
					+ "specified %u32 as underlying type"
						@ "enum classes %(PathCategory, NodeCategory)";
					* missing explicit cast when initializating members with \
						enum class enumerators" @ "enum class %NodeCategory"
						$since b410
				),
				* "wrong overloaded member leading to copy constructor cannot
					be called for non-const reference type" $since b207
					// This also resolves the Clang++ bug, for private member \
						with SFINAE is not enough. See $ref b412 $note \
						"Clang++ bug 8448".
			)
			* $dev "invalid incompelete type %Renderer used"
				@ "construct template %Widget" @ %'UI'.'YWidget' $since b293
		)
	)
	+ DLD "'const' for 'yconstfn' functions and function templates to \
		eliminate Clang++ [-Wno-constexpr-not-const]"
),

b411
(
	/ $dev $build @ "platform %MinGW32" $=
	(
		^ DLP "MinGW[gcc version 4.8.1 (Built by MinGW-builds project)] \
			x32-4.8.1-release-posix-sjlj-rev0" ~ "MinGW[gcc version 4.8.0 \
			(Built by MinGW-builds project)] x32-4.8.0-release-posix-sjlj-rev0 \
			[release-sjlj]" @ "platform %MinGW32",
				// Unchanged: Target=i686-w64-mingw32, Thread model: posix, \
					Exceptions implementation: SjLj.
		/ $dev $build "compiler flag" "'-Og'" -> '-O' @ "debug configurations"
			// $revert(b392) Code::Blocks can't debugging with '-Og' well.
	),
	/ %'YFramework' $=
	(
		/ %'YCLib'.'FileSystem' $=
		(
			- "(functions, function templates) %(udirexists, direxists)",
			/ "class %HFileNode" -> "classes %(FileOperationFailure, \
				DirectorySession, HDirectory, FileIterator)"
		)
		/ %'YSLib' $=
		(
			/ %'UI' $=
			(
				* $dev $doc "exception name" @ %'UI'.'YControl' $since b241,
				/ "empty struct %BadEvent"
					-> "class %BadEvent : public LoggedEvent" @ %'YWidgetEvent'
			),
			/ $dev %'Adaptor'.'YAdaptor' $=
			(
				$dep_from %'YCLib'.'FileSystem';
				+ "using %platform::(FileOperationFailure, DirectorySession, \
					HDirectory, FileIterator)" @ "namespace %IO"
			);
			/ @ "namespace %IO" @ %'Core'.'YFileSystem' $=
			(
				/ @ \cl Path $=
				(
					/ "member function %GetNativeString" -> "%GetMBCS";
					+ "conversion function operator %string"
				);
				- "typedef name %NativeString",
				+ "typedef name %PathNorm",
				/ @ "class %FileList" $=
				(
					/ "supported empty path as '.'",
					/ "discarded returning type" @ "member function %ListItems"
						// Now no counting and reserving list items, and the \
							original would be kept on exception thrown.
				),
				- "all namespace scope yconstexpr constants %(FS_Now, \
					FS_Parent, FS_Separator, FS_Root)",
			)
		)
	)
),

b410
(
	* "wrong implementation" @ "member functions %(filter_self, merge_parents)
		@ "class template %path" @ %'YBase'.'YStandardEx'.'Path' $since b409;
	/ %'YFramework' $=
	(
		* "wrong implementation" @ "macro %YCL_FS_StringIsParent"
			@ %'YCLib'.'FileSystem' $since b409,
		/ %'YSLib'.'Core'.'YFileSystem' $=
		(
			/ @ "class %Path" $=
			(
				+ "using %ypath::(get_norm, filter_self, merge_parents)",
				- "member functions %(GetExtension, IsDirectory, IsAbsolute, \
					IsRelative)",
				+ "member functions %(GetString, Normalize)"
				* "wrong implementation for empty or absolute paths"
					@ "member function %operator/=" $since b409;
				+ "member %operator/= for %String as directly subdirectory \
					access"
			),
			+ "functions %(GetExtensionOf, 4 VerifyDirectory, 3 IsAbsolute, \
				4 IsRelative),
				// Another overloaded %IsAbsolute is from namespace %platform;
			- "functions 2 %ValidatePath";
				// %VerifyDirectory should be used instead.
			+ "member %operator/= for %String as directly subdirectory access"
				@ "class %FileList",
			+ "path and file system node classifying APIs"
			(
				+ "enum classes %(PathCategory, NodeCategory)";
				+ "functions %(ClassifyPath, ClassifyNode)
			)
		)
	),
	/ %'YReader' $=
	(
		/ %'file explorer' $=
		(
			* "non lower-case extensions wrongly ignored" $since b389,
			(
				$dep_from %'YFramework';
				* $comp "non-normalized paths shown" $since b409;
				$dep_to "explorer path"
			)
		),
		/ %'text reader' $=
		(
			$dep_from "explorer path";
			* $comp "non-normalized path wrote into configuration" $since b409
				// This may cause corrupted configuration and crash on loading.
		)
	)
),

b409
(
	/ %'YFramework' $=
	(
		/ $dev "all %Swap" => 'swap',
		/ $dev "all %Clone" => 'clone',
		/ %'YSLib' $=
		(
			/ %'Core' $=
			(
				/ $dev %'YBaseMacro' $=
				(
					/ "macro %DefClone(_q, _t, n)" -> "%DefClone(_q, _t)",
						// Thus all member function name 'Clone' unified as \
							'clone'.
					+ "macro %DefSwap",
					/ "macro %yJOIN" >> 'YBase'.'YDefinition'
				),
				+ "non-member function template %swap for specification of \
					%GEvent" @ %'YEvent',
				+ "non-member function %swap for ,
				+ "non-member function %swap for classs"
					%(Message @ %'YMessage', ValueObject" @ %'YObject'),
				/ %'YFileSystem' $=
				(
					$dep_from %'YCLib'.'FileSystem'
					+ $dev "template specification \
						%ystdex::file_path_norm<YSLib::String>",
					+ $dev "typedef name %ypath";
					/ @ "class %Path" $=
					(
						- "all static member object %(Slash, Now, Parent)",
						/ $dev "implementation" ^ "inheritance %ypath"
							~ "string member",
						- "member functions %('Has*', 'GetRoot*',
							GetRelativePath, GetParentPath, GetFilename,
							GetStem, MakeAbsolute, RemoveFilename,
							ReplaceExtension, NormalizeTrailingSlash),
						+ "iterator typedef names" -> "using
							%ybase::(iterator, const_iterator)",
						+ "typedef %StringType' -> "%value_type",
						/ "2 conversion functions for string referendce"
							-> "conversion function for %String"
						+ "using %ypath::(back, front, begin, end, cbegin, cend,
							iterator, const_iterator, value_type, insert, erase,
							is_absolute, is_relative, empty, clear, size)",
						+ "declarations for friend operator %(==, <) using \
							bases but not native strings"
					)
					- "functions %(GetDirectoryNameOf, 2 ChangeDirectory)"
				)
			),
			+ "non-member function template %swap for class %(BitmapBuffer, \
				BitmapBufferEx)" @ %'Service'.'YGDI'
		),
		/ $dev %'YCLib'.'FileSystem' $=
		(
			$dep_from %'YBase'.'YDefinition';
			+ "function bool platform_ex::FS_IsRoot(const ucs2_t*)"
				@ "platform %DS",
			+ "macro %(YCL_FS_StringIsCurrent, YCL_FS_StringIsParent,
					YCL_FS_CharIsDelimiter, YCL_FS_StringIsRoot)"
		)
	),
	/ $dev %'YBase' $=
	(
		/ %'YStadardEx' $=
		(
			/ "tempalte specification %path<std::string>"
				@ %'YStandardEx'.'Path' -> "partial specification \
				%path<std::basic_string<_tChar, _tAlloc>>",
			/ %'String' $=
			(
				/ "typedef name %string_traits::value_type to adapt to \
					non-class C-style string types",
				+ "2 function templates %string_length"
			)
		),
		+ "macro %yjoin" @ %'YDefinition'
	)
),

b408
(
	/ %'YBase' $=
	(
		* "implementation" @ '#define ynothrow' @ "!defined 'YB_HAS_NOEXCEPT'
			@ 'YDefinition' $since b319,
		/ %'YStandardEx' $=
		(
			/ DLD "all 'std::enable_if' excluding 'using std::enable_if'"
				-> 'enable_if' @ "namespace %ystdex",
		),
		/ $lib %'TypeOperation' $=
		(
			* "macro %YB_TYPE_OP_TEST_2" $since b399;
			* $comp "broken %(details::have_equality_operator,
				ystdex::has_equality_operator)" $since b399
		),
		+ $dev $doc "member grouping Doxygen comments for some random access \
			iterator templates" %'Iterator',
		(
			+ "class templates %(container_adaptor; sequence_container_adaptor)"
				 @ %'Container';
			+ %'Path' $=
			(
				+ "class template %path";
				+ "free function templates for %path"
			)
		),
		/ %'String' $=
		(
			/ "all 2 function tmplates %split" => "%split_l";
				// Marked as "left" because left delimiter is reserved.
			+ "2 function templates %split"
				// New return type is void instead of iterator type.
		),
		/ DLD "normalized template parameters as convention: %(_fPred, _tCont, \
			_tSeqCont)"
	)
),

b407
(
	/ %'YFramework'.'YSLib' $=
	(
		/ $dev @ %'Service'.'YGDI' $=
		(
			/ "interface %IImage" >> 'Core'.'YGDIBase',
			/ "all 'u8'" -> 'PixelType::AlphaType' @ %YGDI
		),
		+ $dev "virtual member function %GraphicDevice::GetBackBuffer"
			@ %'Core'.'YDevice',
		/ %'UI' $=
		(
			/ "constructor" @ "%Window" ^ "renderer"
				~ "background image as 2nd optional parameter",
			/ @ "class %Desktop" $=
			(
				* "no effect for background image argument" @ "destructor"
					$since b294,
				/ @ "constructor" $=
				(
					+ "buffered renderer parameter",
					/ "made renderer through buffer from screen as back buffer \
						when renderer not specified"
				)
			),
			/ @ "constructor" @ "class %BufferedRenderer" @ %'YRenderer' $=
			(
				/ "defaulted creating a new buffer when provided buffer \
					argument is null",
				/ "simplified default argument as '{}'"
			)
		),
		/ "platform %MinGW32" @ %'Helper'.'HostWindow' $=
		(
			+ $dev "virtual member function %Window::Refresh" @ %'HostWindow',
			/ $design
				"increased performance of render windows updating a little",
		)
	),
	/ "made video initialization more" @ "function %ResetVideo" ~ "InitVideo"
		@ "platform %DS" @ %'YCLib'.'Video',
	* "misleading iterator category" @ "template parameters" @ "function \
		template %ystdex::(erase_all, erase_all_if) for associative containers"
		$since b289
		// Containers require forward iterators, not input iterators.
),

b406
(
	/ %'YFramework'.'YSLib' $=
	(
		/ %'Service'.'YGDI' $=
		(
			/ @ "interface %IImage" $=
			(
				+ "abstract method %Clone",
				+ 'ynothrow' @ "method %GetContext"
			);
			+ "class %BasicImage implementing %IImage";
			/ "inheritance of %BitmapBuffer" ^ "BasicImage"
		);
		/ "class %BufferedRenderer" %'UI'.'YRenderer' $=
		(
			/ "buffer" ^ "%unique_ptr<Drawing::IImage>"
				~ "public %BitmapBuffer",
			+ "buffer setting"
		)
	),
	/ DLP "library using" $=
	(
		/ freetype build \conf updated $=
		(
			/ "'modules.cfg' adjusted to fit actual library and rebuilt",
			- '-g' "compiler option" @ "platform %DS"
		);
		^ "recompiled library freetype,
			// See $known_issue_b406.
	),
),

b405
(
	/ %'YFramework' $=
	(
		/ %'Helpers' $=
		(
			/ $dev "class %FPSCounter" @ %'ShellHelper' ^ "types \
				%std::chrono::nanoseconds, %std::size_t"
				~ "unsigned integer types",
			/ @ "%platform MinGW32" $=
			(
				/ "updated only validated area instead of whole widget \
					renderer buffer to improve performance",
				* %"repeated calls to %::GetDC without releasing" $since b386
			)
		),
		/ %'YSLib' $=
		(
			/ @ "class %Timer" @ %'Services' $=
			(
				- "association operations; deactivation, object counting";
					// Activation states is not stored within the timer. \
						Activation only means the timer has the right base \
						tick. This saves significant resource. Users should \
						track the state manually if really needed.
				/ $dev "made interval as public accessible data member"
			),
			/ $dev "protected member %Graphics::size" => "%sGraphics"
				@ %'Core'.'YGDIBase',
			/ %'YGDI' $=
			(
				(
					+ "interface %IImage";
					+ "inheritance %IImage" @ "class %BitmapBuffer"
				),
				/ "class %BitmapBuffer" $=
				(
					- 'using Graphics::GetSizeOfBuffer',
					/ "made member function %GetContext virtual"
				),
				/ @ "classes %(BitmapBuffer, BitmapBufferEx)" $=
				(
					/ $dev "allocation and deallocation" ^ "%unique_ptr"
						~ "%(ynew, ydelete_array)",
					/ "member functions %SetSize" ^ "parameter %'const Size&'"
						~ "2 %SDst",
					/ "allocation fails" @ "member functions %SetSize"
						^ "distinguishable and clearer exception strings"
				),
				+ 'using %BitmapBuffer::SetSize' @ "class %BitmapBufferEx"
			)
		)
		/ @ "%platform DS" @ %'YCLib' $=
		(
			+ "function inline %DMAFillWordsAsync" @ %'NativeAPI',
			/ %'Video' $=
			(
				- "cache flush before DMA copying"
					@ "function %ScreenSynchronize",
				- "fill zeros" @ "function %ResetVideo"
				// These make performance a little improved.
			)
		);
	),
	- $dev $repo "pattern glob '*/build*'" @ "file %.hgignore",
	+ $dev "files for build FreeType2"
	/ $doc "reconstructed most YSLib documentation"
		@ "%Documentation::Designation" >> "%Documentation::YSLib"
),

b404
(
	/ %'YReader'.'shell' $=
	(
		/ "widget layout",
		- "touch screen desktop background image",
		!^ DLD "magic number of image pointer array size"
	),
	(
		+ "access history model template class %GAccessList"
			@ %'YFramework'.'YSLib'.'Service';
		/ $dev "simplified implementation" @ "reading list"
			@ %'YReader'.'text reader'
	)
),

b403
(
	/ %'YFramework' $=
	(
		/ %'YSLib'.'Core' $=
		(
			/ @ "class %String" $=
			(
				/ "simplified constructor template",
				- $dev $lib "static member object for encoding convesion";
				* $comp "thread-safety and reentrance on constructing"
					$since $before b132
			),
			/ %'YFileSystem' $=
			(
				/ @ "class %Path" $=
				(
					/ "allowed specifying encoding" @ "constructor template",
					/ "simplified non-template constuctors",
					/ "public inheritance %String" -> "explicit conversion \
						functions to %(String&, const String&),
					+ "member function %Swap",
					+ "fully implementation"
						@ "member functions %(GetExtension, GetStem)"
				),
				- "namespace scope objects %(FS_Now_X, FS_Parent_X)",
				- "functions %(SplitPath, 2 HaveSameStems, 2 GetExtensionOf, \
					2 IsExtensionOf, 2 HaveSameExtensions, GetStemOf, \
					2 IsStemOf, 2 GetFileNameOf)
					// Use member functions of %Path instead.
			),
			/ "member functions for adding and removing nodes"
				@ "class %ValueNode" $=
			(
				+ "member functions %(Add, Remove) returing %bool",
				/ "member functions %operator(+=, -=) returning %ValueNode&"
			)
		),
		/ %'YCLib'.'NativeAPI $=
		(
			- "object placeholder 'static int t'"
			/ $comp DLB "reduced warning [-funused-variable]"
		),
		/ DLB "implementation to reduce warning [-funused-variable]"
			@ "configuration %'release_*'" @ "function %TestFramework"
			@ %'Helper',
		* "missing 'YF_API'" @ "friend function %operator>>"
			@ %'NPL'.'Configuration' $since b362
	)
),

b402
(
	/ %'YFramework' $=
	(
		/ %'CHRLib' $=
		(
			- "namespace macros",
			+ "3 function templates %MakeUCS2LEString" @ %CharacterProcessing
		),
		/ %'YCLib' $=
		(
			/ $dev "normalized header including with prefix 'YCLib/'",
			/ @ "platform %MinGW32" @ %'NativeAPI' $=
			(
				/ "simplified including" ,
					// Reduced some name pollution.
				- "directory APIs"
			),
			/ %'FileSystem' $=
			(
				/ "class %FileNode" @ "platform %MinGW32" ^ "MinGW \
					wide-oriented directory APIs" ~ "custom UTF-8 APIs",
				* "spell error" $since b171
					$= (/ %YCL_PATH_SEPERATOR => %YCL_PATH_SEPARATOR),
				+ "static asserts to check delimiter and separator constraints",
				+ "file system path encoding constant %CS_Path";
				$dep_to "FileSystem"
			)
		),
		/ %'YSLib' $=
		(
			* "missing header %(YSLib/YAdaptor/YTextBase.h, CHRLib/Convert.hpp)"
				@ "VC++ project" $since b400,
			/ %'Adaptor'.'YAdaptor' $=
			(
				(
					$dep_from "FileSystem";
					+ "using %CS_Path" @ "namespace %YSLib::IO",
					$dep_to "CS_Path"
				);
				/ "all file system related name" @ "namespace %YSLib"
					>> "namespace %YSLib::IO"
			),
			/ %'Core'.'YFileSystem' $=
			(
				* "spell error" $since $before b132
					$= (/ %FS_Seperator => %FS_Separator),
				(
					$dep_from "CS_Path";
					/ "file system path encoding constant %CS_Path"
						~ "%CP_Path";
					- "%CP_Path"
				)
			)
		)
	),
	/ $doc "made expected non-sentance Doxygen especially for directive '\sa'",
	* "missing including header %Functional"
		@ %'YBase'.'YStandardEx'.'AnyIterator' $since b355
),

b401
(
	/ @ %'YFramework'.'Helper' $=
	(
		/ "platform %MinGW32" $=
		(
			/ 'yconstexpr wchar_t WindowClassName[]{L"YFramework Window"}'
				@ "non-public header" >> %'HostWindow',
			+ "2 function templates %WrapWidget" @ "namespace %Host" @ %'HostUI'
		),
		(
			+ "public member %IdleSleep" @ "class %GUIShell" @ %'GUIShell';
			/ "GUI sleep" @ "member function %GUIApplication::DealMessage"
				>> "class %GUIShell"
				// It is only used on hosted environment by default for \
					performance.
		)
	),
	/ $dev $build @ "Code::Blocks projects" $=
	(
		/ "simplified library dependencies",
		+ "pararrel compiling support" @ "makefile commands" @ "platform %DS"
	),
	/ $build "headers of library %freetype" @ "project %YFramework"
		>> "directory %3rdparty/include" ~ "directory %YFramework/include"
		// It is required to put the directory "3rdpraty" into the header \
		//	searching path by user, since FreeType2 headers are explicitly \
		//	included by header "YSLib/Adaptor/Font.h".
),

b400
(
	/ %'YRader' $=
	(
		/ %'text reader' $=
		(
			+ "bookmarks saving and loading",
			(
				$ dep_from "fixed text open mode";
				* $comp "dead loop or wrong position calculated after reader \
					reaching EOF" @ "some files" @ "%platform MinGW32"
					$since b299
			)
		),
		/ $dev "cleanup" @ %('main', 'shells')
			// Eliminated warning[-Wmissing-declarations].
	),
	/ %'YBase'.'YStandardEx' $=
	(
		/ @ %'AnyIterator' $=
		(
			+ "template parameter for difference type"
				@ "class tempalte %any_input_iterator),
			(
				+ "class templates %(any_forward_iterator,
					any_bidirectional_iterator)";
				+ "typedefs %(forward_monomorphic_iterator,
					bidirectional_monomorphic_iterator)
			)
		),
		/ $dev "inheritance and member typedefs cleanup"
			@ "class templates" @ 'Iterator',
		(
			- "all entities %(is_dereferncable, check_dereferncable)";
			* $comp "spelling error" $since b249
		),
		* spell error $since b250 $=
		(
			/ "%is_undereferencable" => "%is_undereferenceable",
			/ "%check_undereferencable" => "%check_undereferenceable"
		)
	),
	/ %'YFramework',
	(
		/ %'CHRLib' $=
		(
			/ %'encoding conversion' $=
			(
				* "implementation" @ "function %MBCToUC#2" $since b299,
				/ "reduced duplicate call of mapping function fetching"
					@ "conversion for string",
				+ $dev "assertions as null pointer check"
			)
			+ "header %Convert.hpp"
		),
		/ %'YSLib' $=
		(
			/ "class %TextFileBuffer" @ %'Service' $=
			(
				(
					* "wrongly using text open mode with random position \
						calculation", $since b273;
					// It seems that DS ignores difference between text and \
						binary mode like POSIX systems, so only affected on \
						platform %MinGW32.
					$ dep_to "fixed text open mode"
				),
				/ "reduced duplicate call of mapping function fetching"
					@ "random accessing"
			),
			/ %'Adaptor' $=
			(
				/ %'YAdaptor' $=
				(
					/ DLD "simplified including headers",
					- "namespace %YSLib::Pattern"
				),
				+ "header %YTextBase.h"
			)
		)
	)
);

////

